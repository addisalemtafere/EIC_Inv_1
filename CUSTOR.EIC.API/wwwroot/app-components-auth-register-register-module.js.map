{"version":3,"sources":["webpack:///./node_modules/ng-recaptcha/forms.js","webpack:///./node_modules/ng-recaptcha/index.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-common.module.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-forms.module.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-loader.service.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-settings.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-value-accessor.directive.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha.component.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha.module.js","webpack:///./src/app/components/auth/register/register-routing.module.ts","webpack:///./src/app/components/auth/register/register.component.html","webpack:///./src/app/components/auth/register/register.component.scss","webpack:///./src/app/components/auth/register/register.component.ts","webpack:///./src/app/components/auth/register/register.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACfA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACpBA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC;AACA;AACA,yDAAyD;AACzD,SAAS,gCAAgC,mDAAmD,IAAI;AAChG,SAAS,gCAAgC,wBAAwB,GAAG,2DAA2D,IAAI;AACnI,MAAM;AACN;AACA,CAAC;AACD;;;;;;;;;;;;;ACnDA;AACA,8CAA8C,cAAc;AAC5D;AACA;;;;;;;;;;;;;ACHA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,oBAAoB;AACpG,iFAAiF,qBAAqB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wEAAwE,wCAAwC,EAAE;AAClH,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,kEAAkE;AAClE,SAAS,kDAAkD;AAC3D,MAAM;AACN;AACA,uBAAuB,6DAA6D;AACpF;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AC/CA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,6CAA6C,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+CAA+C,EAAE;AAC7F,aAAa;AACb;AACA,4CAA4C,wBAAwB,EAAE;AACtE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qDAAqD;AACrD,SAAS,2BAA2B;AACpC,SAAS,2DAA2D;AACpE,SAAS,uBAAuB;AAChC,SAAS,gCAAgC,wBAAwB,GAAG,wEAAwE,IAAI;AAChJ,MAAM;AACN;AACA,gBAAgB,qBAAqB,GAAG,+CAA+C;AACvF,qBAAqB,qBAAqB;AAC1C,mBAAmB,qBAAqB;AACxC,kBAAkB,qBAAqB;AACvC,kBAAkB,qBAAqB;AACvC,sBAAsB,qBAAqB;AAC3C,mBAAmB,qBAAqB;AACxC,sBAAsB,sBAAsB;AAC5C;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACxIA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AAC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","file":"app-components-auth-register-register-module.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar recaptcha_forms_module_1 = require(\"./recaptcha/recaptcha-forms.module\");\nexports.RecaptchaFormsModule = recaptcha_forms_module_1.RecaptchaFormsModule;\nvar recaptcha_value_accessor_directive_1 = require(\"./recaptcha/recaptcha-value-accessor.directive\");\nexports.RecaptchaValueAccessorDirective = recaptcha_value_accessor_directive_1.RecaptchaValueAccessorDirective;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar recaptcha_component_1 = require(\"./recaptcha/recaptcha.component\");\nexports.RecaptchaComponent = recaptcha_component_1.RecaptchaComponent;\nvar recaptcha_loader_service_1 = require(\"./recaptcha/recaptcha-loader.service\");\nexports.RecaptchaLoaderService = recaptcha_loader_service_1.RecaptchaLoaderService;\nexports.RECAPTCHA_LANGUAGE = recaptcha_loader_service_1.RECAPTCHA_LANGUAGE;\nvar recaptcha_module_1 = require(\"./recaptcha/recaptcha.module\");\nexports.RecaptchaModule = recaptcha_module_1.RecaptchaModule;\nvar recaptcha_settings_1 = require(\"./recaptcha/recaptcha-settings\");\nexports.RECAPTCHA_SETTINGS = recaptcha_settings_1.RECAPTCHA_SETTINGS;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar recaptcha_component_1 = require(\"./recaptcha.component\");\nvar RecaptchaCommonModule = /** @class */ (function () {\n    function RecaptchaCommonModule() {\n    }\n    RecaptchaCommonModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    declarations: [recaptcha_component_1.RecaptchaComponent],\n                    exports: [recaptcha_component_1.RecaptchaComponent],\n                },] },\n    ];\n    return RecaptchaCommonModule;\n}());\nexports.RecaptchaCommonModule = RecaptchaCommonModule;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar recaptcha_common_module_1 = require(\"./recaptcha-common.module\");\nvar recaptcha_value_accessor_directive_1 = require(\"./recaptcha-value-accessor.directive\");\nvar RecaptchaFormsModule = /** @class */ (function () {\n    function RecaptchaFormsModule() {\n    }\n    RecaptchaFormsModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    declarations: [\n                        recaptcha_value_accessor_directive_1.RecaptchaValueAccessorDirective,\n                    ],\n                    exports: [recaptcha_value_accessor_directive_1.RecaptchaValueAccessorDirective],\n                    imports: [forms_1.FormsModule, recaptcha_common_module_1.RecaptchaCommonModule],\n                },] },\n    ];\n    return RecaptchaFormsModule;\n}());\nexports.RecaptchaFormsModule = RecaptchaFormsModule;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"@angular/common\");\nvar core_1 = require(\"@angular/core\");\nvar rxjs_1 = require(\"rxjs\");\nexports.RECAPTCHA_LANGUAGE = new core_1.InjectionToken('recaptcha-language');\nvar RecaptchaLoaderService = /** @class */ (function () {\n    function RecaptchaLoaderService(\n    // tslint:disable-next-line:no-any\n    platformId, language) {\n        this.platformId = platformId;\n        this.language = language;\n        this.init();\n        this.ready = common_1.isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : rxjs_1.of();\n    }\n    /** @internal */\n    /** @internal */\n    RecaptchaLoaderService.prototype.init = /** @internal */\n    function () {\n        if (RecaptchaLoaderService.ready) {\n            return;\n        }\n        if (common_1.isPlatformBrowser(this.platformId)) {\n            window.ng2recaptchaloaded = function () {\n                RecaptchaLoaderService.ready.next(grecaptcha);\n            };\n            RecaptchaLoaderService.ready = new rxjs_1.BehaviorSubject(null);\n            var script = document.createElement('script');\n            script.innerHTML = '';\n            var langParam = this.language ? '&hl=' + this.language : '';\n            script.src = \"https://www.google.com/recaptcha/api.js?render=explicit&onload=ng2recaptchaloaded\" + langParam;\n            script.async = true;\n            script.defer = true;\n            document.head.appendChild(script);\n        }\n    };\n    /**\n       * @internal\n       * @nocollapse\n       */\n    RecaptchaLoaderService.ready = null;\n    RecaptchaLoaderService.decorators = [\n        { type: core_1.Injectable },\n    ];\n    /** @nocollapse */\n    RecaptchaLoaderService.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.PLATFORM_ID,] },] },\n        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [exports.RECAPTCHA_LANGUAGE,] },] },\n    ]; };\n    return RecaptchaLoaderService;\n}());\nexports.RecaptchaLoaderService = RecaptchaLoaderService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nexports.RECAPTCHA_SETTINGS = new core_1.InjectionToken('recaptcha-settings');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar recaptcha_component_1 = require(\"./recaptcha.component\");\nvar RecaptchaValueAccessorDirective = /** @class */ (function () {\n    function RecaptchaValueAccessorDirective(host) {\n        this.host = host;\n    }\n    RecaptchaValueAccessorDirective.prototype.writeValue = function (value) {\n        if (!value) {\n            this.host.reset();\n        }\n    };\n    RecaptchaValueAccessorDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    RecaptchaValueAccessorDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    RecaptchaValueAccessorDirective.prototype.onResolve = function ($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    };\n    RecaptchaValueAccessorDirective.decorators = [\n        { type: core_1.Directive, args: [{\n                    providers: [\n                        {\n                            multi: true,\n                            provide: forms_1.NG_VALUE_ACCESSOR,\n                            // tslint:disable-next-line:no-forward-ref\n                            useExisting: core_1.forwardRef(function () { return RecaptchaValueAccessorDirective; }),\n                        },\n                    ],\n                    // tslint:disable-next-line:directive-selector\n                    selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]',\n                },] },\n    ];\n    /** @nocollapse */\n    RecaptchaValueAccessorDirective.ctorParameters = function () { return [\n        { type: recaptcha_component_1.RecaptchaComponent, },\n    ]; };\n    RecaptchaValueAccessorDirective.propDecorators = {\n        \"onResolve\": [{ type: core_1.HostListener, args: ['resolved', ['$event'],] },],\n    };\n    return RecaptchaValueAccessorDirective;\n}());\nexports.RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar recaptcha_loader_service_1 = require(\"./recaptcha-loader.service\");\nvar recaptcha_settings_1 = require(\"./recaptcha-settings\");\nvar nextId = 0;\nvar RecaptchaComponent = /** @class */ (function () {\n    function RecaptchaComponent(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = \"ngrecaptcha-\" + nextId++;\n        this.resolved = new core_1.EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    RecaptchaComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.subscription = this.loader.ready.subscribe(function (grecaptcha) {\n            if (grecaptcha != null) {\n                _this.grecaptcha = grecaptcha;\n                _this.renderRecaptcha();\n            }\n        });\n    };\n    RecaptchaComponent.prototype.ngOnDestroy = function () {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    /**\n       * Executes the invisible recaptcha.\n       * Does nothing if component's size is not set to \"invisible\".\n       */\n    RecaptchaComponent.prototype.execute = /**\n       * Executes the invisible recaptcha.\n       * Does nothing if component's size is not set to \"invisible\".\n       */\n    function () {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n    };\n    RecaptchaComponent.prototype.reset = function () {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    };\n    /** @internal */\n    /** @internal */\n    RecaptchaComponent.prototype.expired = /** @internal */\n    function () {\n        this.resolved.emit(null);\n    };\n    /** @internal */\n    /** @internal */\n    RecaptchaComponent.prototype.captchaReponseCallback = /** @internal */\n    function (response) {\n        this.resolved.emit(response);\n    };\n    /** @internal */\n    /** @internal */\n    RecaptchaComponent.prototype.grecaptchaReset = /** @internal */\n    function () {\n        var _this = this;\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(function () { return _this.grecaptcha.reset(_this.widget); });\n        }\n    };\n    /** @internal */\n    /** @internal */\n    RecaptchaComponent.prototype.renderRecaptcha = /** @internal */\n    function () {\n        var _this = this;\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: function (response) {\n                _this.zone.run(function () { return _this.captchaReponseCallback(response); });\n            },\n            'expired-callback': function () {\n                _this.zone.run(function () { return _this.expired(); });\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n    };\n    RecaptchaComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    exportAs: 'reCaptcha',\n                    selector: 're-captcha',\n                    template: \"\",\n                },] },\n    ];\n    /** @nocollapse */\n    RecaptchaComponent.ctorParameters = function () { return [\n        { type: core_1.ElementRef, },\n        { type: recaptcha_loader_service_1.RecaptchaLoaderService, },\n        { type: core_1.NgZone, },\n        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [recaptcha_settings_1.RECAPTCHA_SETTINGS,] },] },\n    ]; };\n    RecaptchaComponent.propDecorators = {\n        \"id\": [{ type: core_1.Input }, { type: core_1.HostBinding, args: ['attr.id',] },],\n        \"siteKey\": [{ type: core_1.Input },],\n        \"theme\": [{ type: core_1.Input },],\n        \"type\": [{ type: core_1.Input },],\n        \"size\": [{ type: core_1.Input },],\n        \"tabIndex\": [{ type: core_1.Input },],\n        \"badge\": [{ type: core_1.Input },],\n        \"resolved\": [{ type: core_1.Output },],\n    };\n    return RecaptchaComponent;\n}());\nexports.RecaptchaComponent = RecaptchaComponent;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar recaptcha_common_module_1 = require(\"./recaptcha-common.module\");\nvar recaptcha_loader_service_1 = require(\"./recaptcha-loader.service\");\nvar recaptcha_component_1 = require(\"./recaptcha.component\");\nvar RecaptchaModule = /** @class */ (function () {\n    function RecaptchaModule() {\n    }\n    RecaptchaModule.forRoot = function () {\n        return {\n            ngModule: RecaptchaModule,\n            providers: [\n                recaptcha_loader_service_1.RecaptchaLoaderService,\n            ],\n        };\n    };\n    RecaptchaModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    exports: [recaptcha_component_1.RecaptchaComponent],\n                    imports: [recaptcha_common_module_1.RecaptchaCommonModule],\n                },] },\n    ];\n    return RecaptchaModule;\n}());\nexports.RecaptchaModule = RecaptchaModule;\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nconst route: Routes = [\r\n  { path: '', component: RegisterComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(route)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegisterRoutingModule {\r\n}","module.exports = \"<div class=\\\"page-content\\\" style=\\\" margin:auto;width:500px;\\\">\\r\\n  <div class=\\\"mat-elevation-z8\\\" style=\\\"margin: 30px;\\\">\\r\\n    <mat-progress-bar *ngIf=\\\"loadingIndicator\\\" mode=\\\"query\\\"></mat-progress-bar>\\r\\n    <mat-toolbar color=\\\"primary\\\">\\r\\n      <mat-toolbar-row>\\r\\n        <span style=\\\"margin-top:9px; margin-right: 5px\\\"><mat-icon>person</mat-icon></span>\\r\\n        <span>Register</span>\\r\\n        <span class=\\\"toolbar-spacer\\\"></span>\\r\\n        <div class=\\\"header-actions\\\">\\r\\n          <!-- <button mat-icon-button><mat-icon>more_vertical</mat-icon></button> -->\\r\\n        </div>\\r\\n      </mat-toolbar-row>\\r\\n    </mat-toolbar>\\r\\n    <mat-card>\\r\\n      <div class=\\\"error-bar\\\" style=\\\"width:100%; \\\" *ngIf=\\\"errors.length > 0\\\">\\r\\n        <ul>\\r\\n          <li *ngFor=\\\"let error of errors\\\">\\r\\n            {{ error }}\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n      <mat-card-content>\\r\\n        <form #form=\\\"ngForm\\\" [formGroup]=\\\"userProfileForm\\\" novalidate (ngSubmit)=\\\"save()\\\" fxLayout=\\\"column\\\"\\r\\n              fxLayoutGap=\\\"1em\\\" autocomplete=\\\"off\\\">\\r\\n\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n            <mat-form-field fxFlex>\\r\\n              <mat-label>{{'users.editor.FullName' | translate}}</mat-label>\\r\\n              <input matInput formControlName=\\\"fullName\\\" required/>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <!--<div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">-->\\r\\n          <!--<div fxFlex.gt-sm=\\\"0 1 calc(50% - 0.5em)\\\">-->\\r\\n          <!--<mat-checkbox formControlName=\\\"isExistingCustomer\\\" (click)=\\\"ExistingCustomerChecked($event)\\\">-->\\r\\n          <!--{{'users.editor.ExistingCustomer' | translate}}-->\\r\\n          <!--</mat-checkbox>-->\\r\\n          <!--</div>-->\\r\\n          <!--</div>-->\\r\\n\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n            <mat-form-field fxFlex *ngIf=\\\"isExisting\\\">\\r\\n              <mat-label name=\\\"lblTIN\\\">{{'users.editor.TIN' | translate}}</mat-label>\\r\\n              <input matInput formControlName=\\\"tin\\\" NaturalNumberOnlyDir/>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"(tin.hasError('required') || tin.hasError('minLength') || tin.hasError('maxLength'))\\r\\n                 && tin.touched \\\">\\r\\n                {{'users.editor.TINRequired' | translate}}\\r\\n                <!--<small class=\\\"error\\\" *ngIf=\\\"!tin.hasError('isTinUnique')\\\">-->\\r\\n\\r\\n                <!--</small>-->\\r\\n\\r\\n              </mat-error>\\r\\n              <mat-error class=\\\"error\\\"\\r\\n                         *ngIf=\\\"!tin.hasError('required') && tin.hasError('isTinUnique')\\\">\\r\\n                This Tin not registered\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n            <mat-form-field fxFlex>\\r\\n              <mat-label>{{'users.editor.Email' | translate}}</mat-label>\\r\\n              <input matInput formControlName=\\\"email\\\" required/>\\r\\n              <mat-error *ngIf=\\\"email.hasError('required')\\\">\\r\\n                {{'users.editor.EmailRequired' | translate}}\\r\\n              </mat-error>\\r\\n              <mat-error *ngIf=\\\"!email.hasError('required') && email.hasError('email')\\\">\\r\\n                {{'users.editor.InvalidEmail' | translate}}\\r\\n              </mat-error>\\r\\n              <mat-error class=\\\"error\\\"\\r\\n                         *ngIf=\\\"!email.hasError('required') && email.hasError('isEmailUnique')\\\">\\r\\n                This email has been registered already\\r\\n              </mat-error>\\r\\n\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n            <mat-form-field fxFlex>\\r\\n              <mat-label>{{'users.editor.PhoneNumber' | translate}}</mat-label>\\r\\n              <input matInput NaturalNumberOnlyDir formControlName=\\\"phoneNumber\\\" required autocomplete=\\\"off\\\"/>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n            <mat-form-field>\\r\\n              <mat-label>{{'users.editor.UserName' | translate}}</mat-label>\\r\\n              <input matInput formControlName=\\\"userName\\\" autocomplete=\\\"off\\\" required/>\\r\\n              <mat-error *ngIf=\\\"userName.hasError('required')\\\">\\r\\n                {{'users.editor.UserNameRequired' | translate}}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div formGroupName=\\\"password\\\" fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n\\r\\n            <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n              <mat-form-field>\\r\\n                <mat-label>{{'users.editor.NewPassword' | translate}}</mat-label>\\r\\n                <input matInput type=\\\"password\\\" formControlName=\\\"newPassword\\\" autocomplete=\\\"off\\\" required/>\\r\\n                <mat-error *ngIf=\\\"newPassword.hasError('required')\\\">\\r\\n                  {{'users.editor.NewPasswordRequired' | translate}}\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"!newPassword.hasError('required') && newPassword.hasError('pattern')\\\">\\r\\n                  {{'users.editor.NewPasswordRules' | translate}}\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n\\r\\n              <mat-form-field fxFlex>\\r\\n                <mat-label>{{'users.editor.ConfirmPassword' | translate}}</mat-label>\\r\\n                <input matInput type=\\\"password\\\" formControlName=\\\"confirmPassword\\\" required/>\\r\\n                <mat-error *ngIf=\\\"confirmPassword.hasError('required')\\\">\\r\\n                  {{'users.editor.ConfirmationPasswordRequired' | translate}}\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"!confirmPassword.hasError('required') && confirmPassword.hasError('notEqual')\\\">\\r\\n                  {{'users.editor.PasswordMismatch' | translate}}\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\r\\n            <!--<re-captcha formControlName=\\\"recaptcha\\\" required></re-captcha>-->\\r\\n            <!-- <div *ngIf=\\\"recaptcha.errors.required\\\">You must check the security image</div> -->\\r\\n          </div>\\r\\n          <!-- https://github.com/angular/material2/issues/8798 -->\\r\\n          <div>&nbsp;</div>\\r\\n        </form>\\r\\n      </mat-card-content>\\r\\n\\r\\n      <!-- <div class=\\\"alert-info\\\" role=\\\"alert\\\">\\r\\n        <div class=\\\"f-lft\\\">\\r\\n          <mat-icon class=\\\"mat-18\\\" color=\\\"primary\\\">info</mat-icon>\\r\\n          <div class=\\\"txt-j\\\"> By continuing using the system you certify that you have\\r\\n            read\\r\\n            the above service request instruction and accept the applicable\\r\\n            <p class=\\\"bld\\\">\\r\\n              <a target=\\\"_blank\\\" ui-sref=\\\"page({url:'privacy-policy'})\\\" translate=\\\"\\\" href=\\\"/page/privacy-policy\\\">Terms\\r\\n                and Conditions</a>\\r\\n            </p>\\r\\n            <mat-checkbox>Accept!</mat-checkbox>\\r\\n\\r\\n          </div>\\r\\n        </div>\\r\\n      </div> -->\\r\\n\\r\\n      <div style=\\\"text-align: center\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"save()\\\" [disabled]=\\\"userProfileForm.invalid\\\">Register\\r\\n        </button>\\r\\n      </div>\\r\\n      <!--{{userProfileForm.value | json}}-->\\r\\n    </mat-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, NgForm, Validators} from '@angular/forms';\r\n\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\nimport {AppTranslationService} from '../../../../@custor/services/translation.service';\r\nimport {AccountService} from '../../../../@custor/services/security/account.service';\r\nimport {ToastrService} from 'ngx-toastr';\r\n\r\nimport {User} from '../../../model/security/user.model';\r\nimport {UserEdit} from '../../../model/security/user-edit.model';\r\nimport {Role} from '../../../model/security/role.model';\r\nimport {Permission} from '../../../model/security/permission.model';\r\nimport {EqualValidator} from '../../../../@custor/validation/equal.validator';\r\nimport {Router} from '@angular/router';\r\nimport {Utilities} from '../../../../@custor/helpers/utilities';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnDestroy, OnInit {\r\n  @ViewChild('form')\r\n  private form: NgForm;\r\n  isExisting = false;\r\n  isNewUser = true;\r\n  isChangePassword = false;\r\n  private isSaving = false;\r\n  private passwordWatcher: Subscription;\r\n  private onUserSaved = new Subject<User>();\r\n\r\n  @Input() user: User = new User();\r\n  @Input() roles: Role[] = [];\r\n  @Input() isEditMode = false;\r\n  @Input() errors: string[] = [];\r\n  userProfileForm: FormGroup;\r\n  userSaved$ = this.onUserSaved.asObservable();\r\n  loadingIndicator: boolean;\r\n  constructor(\r\n    private alertService: ToastrService,\r\n    private translationService: AppTranslationService,\r\n    private accountService: AccountService,\r\n    private formBuilder: FormBuilder, private router: Router\r\n  ) {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.passwordWatcher.unsubscribe();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.formControlValueChanged();\r\n  }\r\n\r\n  formControlValueChanged() {\r\n    const cTin = this.userProfileForm.get('tin');\r\n\r\n    this.existingCustomer.valueChanges.subscribe(\r\n      (checkStatus: boolean) => {\r\n        if (checkStatus === true) {\r\n          cTin.setValidators([Validators.required, Validators.minLength(10), Validators.maxLength(10)]);\r\n          // cTin.setAsyncValidators(this.isTinUnique.bind(this));\r\n        } else {\r\n          cTin.clearValidators();\r\n        }\r\n        cTin.updateValueAndValidity();\r\n      });\r\n  }\r\n\r\n  private buildForm() {\r\n    this.userProfileForm = this.formBuilder.group({\r\n      tin: '',\r\n      userName: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: this.formBuilder.group({\r\n        newPassword: ['', [Validators.required, Validators.pattern(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W]).{8,}/)]],\r\n        confirmPassword: ['', [Validators.required, EqualValidator('newPassword')]],\r\n      }),\r\n      fullName: ['', Validators.required],\r\n      phoneNumber: ['', Validators.required],\r\n      isExistingCustomer: false,\r\n      // recaptcha: [null]\r\n    });\r\n\r\n    this.passwordWatcher = this.newPassword.valueChanges.subscribe(() =>\r\n      this.confirmPassword.updateValueAndValidity());\r\n  }\r\n\r\n  public resetForm(stopEditing: boolean = false) {\r\n    if (stopEditing) {\r\n      this.isEditMode = false;\r\n    }\r\n\r\n    if (!this.user) {\r\n      this.isNewUser = true;\r\n      this.user = new User();\r\n    }\r\n\r\n    if (this.isNewUser) {\r\n      this.isChangePassword = true;\r\n      this.addNewPasswordValidators();\r\n    } else {\r\n      this.isChangePassword = false;\r\n      this.newPassword.clearValidators();\r\n      this.confirmPassword.clearValidators();\r\n    }\r\n\r\n    this.userProfileForm.reset({\r\n      tin: this.user.Tin || '',\r\n      userName: this.user.UserName || '',\r\n      email: this.user.Email || '',\r\n      password: {\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n      },\r\n      fullName: this.user.FullName || '',\r\n      phoneNumber: this.user.PhoneNumber || '',\r\n      isExistingCustomer: false\r\n    });\r\n  }\r\n\r\n  public beginEdit() {\r\n    this.isEditMode = true;\r\n    this.isChangePassword = false;\r\n  }\r\n\r\n  public save() {\r\n    this.loadingIndicator = true;\r\n    if (!this.form.submitted) {\r\n      // Causes validation to update.\r\n      this.form.onSubmit(null);\r\n      return;\r\n    }\r\n\r\n    if (!this.userProfileForm.valid) {\r\n      this.alertService.error(this.translationService.getTranslation('form.ErrorMessage'),\r\n        this.translationService.getTranslation('form.ErrorCaption'));\r\n      return;\r\n    }\r\n\r\n    this.isSaving = true;\r\n    const editedUser = this.getEditedUser();\r\n\r\n    if (this.isNewUser) {\r\n      // this.accountService.newUser(editedUser).subscribe(\r\n      //   user => this.saveCompleted(user),\r\n      //   error => this.saveFailed(error));\r\n\r\n      this.accountService.selfRegisterNewUser(editedUser).subscribe(\r\n        user => this.saveCompleted(user),\r\n        error => this.saveFailed(error));\r\n\r\n    } else {\r\n      this.accountService.updateUser(editedUser).subscribe(\r\n        response => this.saveCompleted(editedUser),\r\n        error => this.saveFailed(error));\r\n    }\r\n\r\n    this.loadingIndicator = false;\r\n  }\r\n\r\n  public cancel() {\r\n    this.resetForm();\r\n    this.isEditMode = false;\r\n  }\r\n\r\n  private getEditedUser(): UserEdit {\r\n    const formModel = this.userProfileForm.value;\r\n    const tempRole: string[] = ['Online Users'];\r\n    const onlineSitecode = 'OnlineSite';\r\n    return {\r\n      Id: this.user.Id,\r\n      Tin: formModel.tin,\r\n      UserName: formModel.userName,\r\n      FullName: formModel.fullName,\r\n      FriendlyName: formModel.friendlyName,\r\n      Email: formModel.email,\r\n      PhoneNumber: formModel.phoneNumber,\r\n      Roles: tempRole,\r\n      CurrentPassword: '',\r\n      NewPassword: formModel.password.newPassword,\r\n      ConfirmPassword: formModel.password.confirmPassword,\r\n      IsEnabled: true,\r\n      IsLockedOut: false,\r\n      SiteCode: onlineSitecode\r\n    };\r\n  }\r\n\r\n  private saveCompleted(user?: User) {\r\n    if (user) {\r\n      this.user = user;\r\n    }\r\n\r\n    this.isSaving = false;\r\n    this.resetForm(true);\r\n    this.alertService.success('Your account has been registered successfully.', 'Success');\r\n    this.onUserSaved.next(this.user);\r\n    this.router.navigate(['/confirm']);\r\n  }\r\n\r\n  private saveFailed(error: any) {\r\n    this.isSaving = false;\r\n    // this.alertService.error('One or more errors occured whilst saving your changes:',\r\n    //   'Save Error');\r\n    // this.alertService.error(null, error);\r\n    const errList = Utilities.getHttpResponseMessage(error);\r\n    if (error.status === 400) { // bad request (validation)\r\n      this.errors = errList;\r\n      this.alertService.error('Please fix the listed errors', 'Error');\r\n    } else {\r\n      this.errors = [];\r\n      this.alertService.error(error.status + ':' + errList[0].toString(), 'Error');\r\n    }\r\n  }\r\n\r\n  private addNewPasswordValidators() {\r\n    this.newPassword.setValidators([Validators.required, Validators.pattern(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W]).{8,}/)]);\r\n    this.confirmPassword.setValidators([Validators.required, EqualValidator('newPassword')]);\r\n  }\r\n\r\n  public ExistingCustomerChecked(event) {\r\n    this.isExisting = (this.isExisting === true) ? false : true;\r\n  }\r\n\r\n  private unlockUser() {\r\n    this.isSaving = true;\r\n    this.accountService.unblockUser(this.user.Id)\r\n      .subscribe(response => {\r\n          this.isSaving = false;\r\n          this.user.IsLockedOut = false;\r\n          this.userProfileForm.patchValue({\r\n            isLockedOut: this.user.IsLockedOut\r\n          });\r\n          this.alertService.success('User has been successfully unlocked', 'Success');\r\n        },\r\n        error => {\r\n          this.isSaving = false;\r\n          this.alertService.error('The below errors occured whilst unlocking the user:',\r\n            'Unblock Error');\r\n          this.alertService.error(null, error);\r\n        });\r\n  }\r\n\r\n  validateMinMax(min, max) {\r\n    return ['', [\r\n      Validators.required,\r\n      Validators.minLength(min),\r\n      Validators.maxLength(max),\r\n      Validators.pattern('[0-9]+')  //  digits only\r\n    ]];\r\n  }\r\n\r\n  recaptcha;\r\n  get tin() {\r\n    return this.userProfileForm.get('tin');\r\n  }\r\n\r\n  get existingCustomer() {\r\n    return this.userProfileForm.get('isExistingCustomer');\r\n  }\r\n\r\n  get userName() {\r\n    return this.userProfileForm.get('userName');\r\n  }\r\n\r\n  get email() {\r\n    return this.userProfileForm.get('email');\r\n  }\r\n\r\n  get password() {\r\n    return this.userProfileForm.get('password');\r\n  }\r\n\r\n  get newPassword() {\r\n    return this.password.get('newPassword');\r\n  }\r\n\r\n  get confirmPassword() {\r\n    return this.password.get('confirmPassword');\r\n  }\r\n\r\n  get assignedRoles() {\r\n    return this.userProfileForm.get('roles');\r\n  }\r\n\r\n  get canViewRoles() {\r\n    return this.accountService.userHasPermission(Permission.viewRolesPermission);\r\n  }\r\n\r\n  get canAssignRoles() {\r\n    return this.accountService.userHasPermission(Permission.assignRolesPermission);\r\n  }\r\n\r\n  get isEditingSelf() {\r\n    return this.accountService.currentUser ? this.user.Id === this.accountService.currentUser.Id : false;\r\n  }\r\n\r\n  get floatLabels(): string {\r\n    return this.isEditMode ? 'auto' : 'always';\r\n  }\r\n\r\n  isEmailUnique(control: FormControl) {\r\n    const q = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          this.accountService.isEmailRegisterd(control.value).subscribe((response) => {\r\n            // console.log(response);\r\n\r\n            if (response === true) {\r\n              resolve({'isEmailUnique': true});\r\n            } else {\r\n              // resolve({'isEmailUnique': false});\r\n              this.userProfileForm.get('email').updateValueAndValidity();\r\n\r\n            }\r\n          }, () => {\r\n            // resolve({'isEmailUnique': }\r\n            // );\r\n          });\r\n        }, 1000);\r\n      }\r\n    );\r\n    // // console.log(this.userProfileForm.get('email').hasError('isEmailUnique'));\r\n    return q;\r\n  }\r\n\r\n  isTinUnique(control: FormControl) {\r\n    const q = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          this.accountService.isTinUnique(control.value).subscribe((response) => {\r\n            // console.log(response);\r\n\r\n            if (response === true) {\r\n              // console.log(response);\r\n              resolve({'isTinUnique': false});\r\n            } else {\r\n              // resolve({'isTinUnique': true});\r\n              this.userProfileForm.get('email').updateValueAndValidity();\r\n\r\n            }\r\n          }, () => {\r\n            // resolve({'isEmailUnique': }\r\n\r\n            // );\r\n          });\r\n        }, 1000);\r\n      }\r\n    );\r\n    // console.log(this.userProfileForm.get('tin').hasError('isTinUnique'));\r\n\r\n    return q;\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule} from '@custor/modules/shared.module';\r\nimport {RegisterRoutingModule} from './register-routing.module';\r\nimport {RegisterComponent} from './register.component';\r\nimport { RecaptchaModule, RECAPTCHA_SETTINGS, RecaptchaSettings } from 'ng-recaptcha';\r\nimport { RecaptchaFormsModule } from 'ng-recaptcha/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    CommonModule,\r\n    RegisterRoutingModule,\r\n    RecaptchaFormsModule,\r\n    RecaptchaModule\r\n  ],\r\n  declarations: [RegisterComponent]\r\n})\r\nexport class RegisterModule {\r\n}"],"sourceRoot":""}