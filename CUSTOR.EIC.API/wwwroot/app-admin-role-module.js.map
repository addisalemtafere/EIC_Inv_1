{"version":3,"sources":["webpack:///./src/app/admin/role-routing.module.ts","webpack:///./src/app/admin/role.module.ts","webpack:///./src/app/admin/roles/edit-role-dialog.component.html","webpack:///./src/app/admin/roles/edit-role-dialog.component.scss","webpack:///./src/app/admin/roles/edit-role-dialog.component.ts","webpack:///./src/app/admin/roles/role-editor.component.html","webpack:///./src/app/admin/roles/role-editor.component.scss","webpack:///./src/app/admin/roles/role-editor.component.ts","webpack:///./src/app/admin/roles/role-list.component.html","webpack:///./src/app/admin/roles/role-list.component.scss","webpack:///./src/app/admin/roles/role-list.component.ts"],"names":[],"mappings":"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","file":"app-admin-role-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RoleListComponent } from './roles/role-list.component';\r\n\r\nconst route: Routes = [\r\n  { path: '', component: RoleListComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(route)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RoleRoutingModule {\r\n}","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule} from '@custor/modules/shared.module';\r\nimport {RoleRoutingModule} from './role-routing.module';\r\nimport {RoleEditorComponent} from './roles/role-editor.component';\r\nimport {RoleListComponent} from './roles/role-list.component';\r\nimport {EditRoleDialogComponent} from './roles/edit-role-dialog.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    RoleRoutingModule\r\n  ],\r\n  declarations: [\r\n    RoleListComponent,\r\n    EditRoleDialogComponent,\r\n    RoleEditorComponent,\r\n  ],\r\n  entryComponents: [\r\n    EditRoleDialogComponent\r\n  ]\r\n})\r\nexport class RoleModule {\r\n}","module.exports = \"<div >\\r\\n  <mat-toolbar color=\\\"primary\\\" mat-dialog-title>\\r\\n    <!-- Test -->\\r\\n    <h1 *ngIf=\\\"!canManageRoles\\\">{{'roles.management.RoleDetails' | translate:roleName}}</h1>\\r\\n    <h1 *ngIf=\\\"canManageRoles\\\">{{roleName ? ('roles.management.EditRole' | translate:roleName) :\\r\\n      ('roles.management.NewRole' | translate)}}</h1>\\r\\n  </mat-toolbar>\\r\\n  <br>\\r\\n  <div style=\\\"padding: 10px\\\">\\r\\n    <div>\\r\\n      <role-editor #roleEditor [role]=\\\"data.role\\\" [allPermissions]=\\\"data.allPermissions\\\"></role-editor>\\r\\n      <div mat-dialog-actions style=\\\"text-align: center; margin-left: 30%\\\">\\r\\n        <button *ngIf=\\\"canManageRoles\\\" mat-raised-button (click)=\\\"roleEditor.save();\\\" color=\\\"primary\\\">Save</button>\\r\\n        <button *ngIf=\\\"canManageRoles\\\" mat-raised-button (click)=\\\"cancel()\\\" color=\\\"warn\\\">Cancel</button>\\r\\n        <button *ngIf=\\\"!canManageRoles\\\" mat-raised-button (click)=\\\"cancel()\\\">Close</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \".mat-toolbar {\\n  margin: -24px;\\n  margin-bottom: 0;\\n  width: auto; }\\n\\n.mat-dialog-content {\\n  margin: 0 -24px;\\n  padding: 0 !important;\\n  height: 70%; }\\n\\n.mat-toolbar-row, .mat-toolbar-single-row {\\n  height: 40px !important; }\\n\\n.mat-dialog-container {\\n  padding: 3px !important; }\\n\"","import {AfterViewInit, Component, Inject, ViewChild} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\n\r\nimport {RoleEditorComponent} from './role-editor.component';\r\nimport {Role} from '../../model/security/role.model';\r\nimport {Permission} from '../../model/security/permission.model';\r\nimport {AccountService} from '../../../@custor/services/security/account.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-user-dialog',\r\n  templateUrl: 'edit-role-dialog.component.html',\r\n  styleUrls: ['edit-role-dialog.component.scss']\r\n})\r\nexport class EditRoleDialogComponent implements AfterViewInit {\r\n  @ViewChild(RoleEditorComponent)\r\n  roleEditor: RoleEditorComponent;\r\n\r\n  get roleName(): any {\r\n    return this.data.role ? {name: this.data.role.Name} : null;\r\n  }\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<RoleEditorComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { role: Role, allPermissions: Permission[] },\r\n    private accountService: AccountService\r\n  ) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.roleEditor.roleSaved$.subscribe(role => this.dialogRef.close(role));\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close(null);\r\n  }\r\n\r\n  get canManageRoles() {\r\n    return  this.accountService.userHasPermission(Permission.manageRolesPermission);\r\n  }\r\n}\r\n","module.exports = \"<div>\\r\\n\\r\\n  <form #form=\\\"ngForm\\\" [formGroup]=\\\"roleForm\\\" novalidate (ngSubmit)=\\\"save()\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"1em\\\"\\r\\n        autocomplete=\\\"off\\\">\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"1em\\\" class=\\\"mat-elevation-z8\\\" style=\\\"padding:20px\\\">\\r\\n\\r\\n      <div>\\r\\n        <!--<h4>Role Data</h4>-->\\r\\n        <!--<mat-divider></mat-divider>-->\\r\\n        <br>\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"2em\\\" class=\\\"row\\\">\\r\\n          <mat-form-field fxFlex style=\\\"width: 100px\\\">\\r\\n            <mat-label>{{'roles.editor.Name' | translate}}</mat-label>\\r\\n            <input matInput formControlName=\\\"name\\\" [readonly]=\\\"!canManageRoles\\\"/>\\r\\n            <mat-error *ngIf=\\\"name.hasError('required')\\\">\\r\\n              {{'roles.editor.RoleNameRequired' | translate}}\\r\\n            </mat-error>\\r\\n          </mat-form-field>\\r\\n\\r\\n          <mat-form-field fxFlex style=\\\"width: 500px\\\">\\r\\n            <mat-label>{{'roles.editor.Description' | translate}}</mat-label>\\r\\n            <input matInput formControlName=\\\"description\\\" [readonly]=\\\"!canManageRoles\\\"/>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"mat-elevation-z8\\\" style=\\\" overflow:scroll; height: 300px\\\">\\r\\n      <h4>Select Permissions</h4>\\r\\n      <mat-divider></mat-divider>\\r\\n      <br>\\r\\n      <mat-expansion-panel *ngFor=\\\"let permissionGroup of allPermissions | groupBy: 'GroupName'\\\"\\r\\n                           class=\\\"mat-elevation-z6\\\">\\r\\n        <mat-expansion-panel-header style=\\\"background-color:whitesmoke\\\">\\r\\n          <mat-panel-title>\\r\\n            {{permissionGroup.key}}\\r\\n          </mat-panel-title>\\r\\n        </mat-expansion-panel-header>\\r\\n        <mat-slide-toggle [disabled]=\\\"!canManageRoles\\\" *ngFor=\\\"let permission of permissionGroup.value\\\"\\r\\n                          matTooltip=\\\"{{permission.Description}}\\\"\\r\\n                          (click)=\\\"$event.stopPropagation()\\\"\\r\\n                          (change)=\\\"$event ? selectedPermissions.toggle(permission) : null\\\"\\r\\n                          [checked]=\\\"selectedPermissions.isSelected(permission)\\\">\\r\\n          {{permission.Name}}\\r\\n        </mat-slide-toggle>\\r\\n      </mat-expansion-panel>\\r\\n    </div>\\r\\n    <br/>\\r\\n  </form>\\r\\n</div>\\r\\n\"","module.exports = \"span.hr-inner {\\n  border-color: green !important; }\\n\\n.hr {\\n  margin: 10px 0; }\\n\\n.mat-dialog-container {\\n  height: unset !important; }\\n\"","import { Component, Input, OnChanges, ViewChild } from '@angular/core';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Permission } from '../../model/security/permission.model';\r\nimport { Role } from '../../model/security/role.model';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AccountService } from '../../../@custor/services/security/account.service';\r\nimport {SitesService} from '../../components/setting/othe-tabs/site/site.service';\r\nimport { SiteModel } from '../../model/Site.model';\r\n\r\n@Component({\r\n  selector: 'role-editor',\r\n  templateUrl: './role-editor.component.html',\r\n  styleUrls: ['./role-editor.component.scss']\r\n})\r\nexport class RoleEditorComponent implements OnChanges {\r\n  @ViewChild('form')\r\n  private form: NgForm;\r\n\r\n  selectedPermissions: SelectionModel<Permission>;\r\n  private isNewRole = false;\r\n  private isSaving: boolean;\r\n  private onRoleSaved = new Subject<Role>();\r\n\r\n  @Input() role: Role = new Role();\r\n  @Input() allPermissions: Permission[] = [];\r\n\r\n  roleForm: FormGroup;\r\n  roleSaved$ = this.onRoleSaved.asObservable();\r\n  sites: SiteModel[] = [];\r\n\r\n  get name() {\r\n    return this.roleForm.get('name');\r\n  }\r\n\r\n  constructor(\r\n    private alertService: ToastrService,\r\n    private accountService: AccountService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.buildForm();\r\n    this.selectedPermissions = new SelectionModel<Permission>(true, []);\r\n    // alert ( this.selectedPermissions.hasValue);\r\n    // // console.log (\"has-\" + this.selectedPermissions.hasValue);\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.role) {\r\n      this.isNewRole = false;\r\n    } else {\r\n      this.isNewRole = true;\r\n      this.role = new Role();\r\n    }\r\n\r\n    this.resetForm();\r\n  }\r\n\r\n  public save() {\r\n    if (!this.form.submitted) {\r\n      this.form.onSubmit(null);\r\n      return;\r\n    }\r\n\r\n    if (!this.roleForm.valid) {\r\n      return;\r\n    }\r\n\r\n    this.isSaving = true;\r\n    const editedRole = this.getEditedRole();\r\n\r\n    if (this.isNewRole) {\r\n      this.accountService.newRole(editedRole).subscribe(\r\n        role => this.saveSuccessHelper(role),\r\n        error => this.saveFailedHelper(error));\r\n    } else {\r\n      this.accountService.updateRole(editedRole).subscribe(\r\n        response => this.saveSuccessHelper(editedRole),\r\n        error => this.saveFailedHelper(error));\r\n    }\r\n  }\r\n\r\n  private getEditedRole(): Role {\r\n    const formModel = this.roleForm.value;\r\n\r\n    return {\r\n      Id: this.role.Id,\r\n      Name: formModel.name,\r\n      Description: formModel.description,\r\n      Permissions: this.selectedPermissions.selected,\r\n      UsersCount: 0\r\n    };\r\n  }\r\n\r\n  private saveSuccessHelper(role?: Role) {\r\n    this.isSaving = false;\r\n    if (this.isNewRole) {\r\n      this.alertService.success(`Role \\\"${role.Name}\\\" was created successfully`, 'Success');\r\n    } else {\r\n      this.alertService.success(`Changes to role \\\"${role.Name}\\\" was saved successfully`,\r\n        'success');\r\n    }\r\n    if (!this.isNewRole) {\r\n      if (this.accountService.currentUser.Roles.some(r => r === this.role.Name)) {\r\n        this.refreshLoggedInUser();\r\n      }\r\n\r\n      role.UsersCount = this.role.UsersCount;\r\n    }\r\n\r\n    this.onRoleSaved.next(role);\r\n  }\r\n\r\n  private refreshLoggedInUser() {\r\n    this.accountService.refreshLoggedInUser()\r\n      .subscribe(user => {\r\n      },\r\n        error => {\r\n          this.alertService.error('An error occured whilst refreshing logged in user information from the server',\r\n            'Refresh failed');\r\n        });\r\n  }\r\n\r\n  private saveFailedHelper(error: any) {\r\n    this.isSaving = false;\r\n    this.alertService.error('The below errors occured whilst saving your changes:', 'Save Error');\r\n    this.alertService.error(null, error);\r\n  }\r\n\r\n  private cancel() {\r\n    this.resetForm();\r\n  }\r\n\r\n  private selectAll() {\r\n    this.selectedPermissions.select(...this.allPermissions);\r\n  }\r\n\r\n  private toggleGroup(groupName: string) {\r\n    let firstMemberValue: boolean;\r\n\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.selectedPermissions.selected; // ???? to-do\r\n\r\n    const permissions = this.allPermissions\r\n      .filter(p => p.GroupName === groupName);\r\n\r\n    if (permissions.length) {\r\n      if (this.selectedPermissions.isSelected(permissions[0])) {\r\n        this.selectedPermissions.deselect(...permissions);\r\n      } else {\r\n        this.selectedPermissions.select(...permissions);\r\n      }\r\n    }\r\n  }\r\n\r\n  private buildForm() {\r\n    this.roleForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      description: ''\r\n    });\r\n  }\r\n\r\n  private resetForm(replace = false) {\r\n    this.roleForm.reset({\r\n      name: this.role.Name || '',\r\n      description: this.role.Description || ''\r\n    });\r\n\r\n    const selectePermissions = this.role.Permissions\r\n      ? this.allPermissions.filter(x => this.role.Permissions.find(y => y.Value === x.Value))\r\n      : [];\r\n\r\n    this.selectedPermissions = new SelectionModel<Permission>(true, selectePermissions);\r\n    // alert (this.selectedPermissions.selected.length);\r\n  }\r\n\r\n  get canManageRoles() {\r\n    return  this.accountService.userHasPermission(Permission.manageRolesPermission);\r\n  }\r\n}\r\n","module.exports = \"<app-page-header title=\\\"Roles\\\" icon=\\\"assignment_ind\\\"></app-page-header>\\r\\n<div [@fadeInOut] class=\\\"page-content\\\">\\r\\n\\r\\n  <div class=\\\"search-box\\\">\\r\\n    <mat-form-field>\\r\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\"\\r\\n             placeholder=\\\"{{'roles.management.Search' | translate}}\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n    <mat-progress-bar *ngIf=\\\"loadingIndicator\\\" mode=\\\"query\\\"></mat-progress-bar>\\r\\n    <mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"roleName\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header> {{'roles.management.Name' | translate}}</mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let role\\\"> {{role.Name}}</mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"description\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header> {{'roles.management.Description' | translate}}\\r\\n        </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let role\\\"> {{role.Description}}</mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"users\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header fxFlex=\\\"60px\\\"> {{'roles.management.Users' | translate}}\\r\\n        </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let role\\\" fxFlex=\\\"60px\\\"> {{role.UsersCount}}</mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"actions\\\">\\r\\n        <mat-header-cell *matHeaderCellDef fxFlex=\\\"140px\\\">\\r\\n          <button *ngIf=\\\"canManageRoles\\\" mat-button color=\\\"primary\\\"\\r\\n                  matTooltip=\\\"{{'roles.management.NewRole' | translate}}\\\" (click)=\\\"editRole()\\\">\\r\\n            <mat-icon class=\\\"mat-button-icon\\\">add</mat-icon>\\r\\n            {{'roles.management.NewRole' | translate}}\\r\\n          </button>\\r\\n        </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let role\\\" fxFlex=\\\"140px\\\">\\r\\n          <button *ngIf=\\\"!canManageRoles\\\" mat-icon-button matTooltip=\\\"{{'roles.management.Details' | translate}}\\\"\\r\\n                  (click)=\\\"editRole(role)\\\">\\r\\n            <mat-icon>more_vert</mat-icon>\\r\\n          </button>\\r\\n          <button *ngIf=\\\"canManageRoles\\\" mat-icon-button matTooltip=\\\"{{'roles.management.Edit' | translate}}\\\"\\r\\n                  (click)=\\\"editRole(role)\\\">\\r\\n            <mat-icon>edit</mat-icon>\\r\\n          </button>\\r\\n          <button *ngIf=\\\"canManageRoles\\\" mat-icon-button matTooltip=\\\"{{'roles.management.Delete' | translate}}\\\"\\r\\n                  (click)=\\\"confirmDelete(role)\\\">\\r\\n            <mat-icon color=\\\"warn\\\">delete</mat-icon>\\r\\n          </button>\\r\\n        </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\r\\n      </mat-row>\\r\\n    </mat-table>\\r\\n\\r\\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \".search-box {\\n  flex-direction: column;\\n  box-sizing: border-box;\\n  display: flex; }\\n\\n.search-box .mat-form-field {\\n  padding: 0 2em; }\\n\"","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatSnackBar, MatSort, MatTableDataSource} from '@angular/material';\r\n\r\nimport {EditRoleDialogComponent} from './edit-role-dialog.component';\r\nimport {fadeInOut} from '../../../@custor/services/animations';\r\nimport {Role} from '../../model/security/role.model';\r\nimport {Permission} from '../../model/security/permission.model';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {AppTranslationService} from '../../../@custor/services/translation.service';\r\nimport {AccountService} from '../../../@custor/services/security/account.service';\r\nimport {Utilities} from '../../../@custor/helpers/utilities';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-role-list',\r\n  templateUrl: './role-list.component.html',\r\n  styleUrls: ['./role-list.component.scss'],\r\n  animations: [fadeInOut]\r\n})\r\nexport class RoleListComponent implements OnInit, AfterViewInit {\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  displayedColumns = ['roleName', 'description', 'users', 'actions'];\r\n  dataSource: MatTableDataSource<Role>;\r\n  allPermissions: Permission[] = [];\r\n  sourceRole: Role;\r\n  editingRoleName: { name: string };\r\n  loadingIndicator: boolean;\r\n\r\n  constructor(\r\n    private alertService: ToastrService,\r\n    private translationService: AppTranslationService,\r\n    private accountService: AccountService,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog, private router: Router) {\r\n    this.dataSource = new MatTableDataSource();\r\n  }\r\n\r\n  get canManageRoles() {\r\n    return this.accountService.userHasPermission(Permission.manageRolesPermission);\r\n  }\r\n\r\n  get canViewRoles() {\r\n    return this.accountService.userHasPermission(Permission.viewRolesPermission);\r\n  }\r\n\r\n  get canManageAdmins() {\r\n    return this.accountService.userHasPermission(Permission.manageSiteAdministratorsPermission);\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.checkAuthorization();\r\n    this.loadData();\r\n  }\r\n\r\n  checkAuthorization() {\r\n    if (!this.canManageRoles) {\r\n      // this.alertService.error('You are not allowed to access this page');\r\n      this.router.navigate(['denied']);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  public applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n  private refresh() {\r\n    // Causes the filter to refresh there by updating with recently added data.\r\n    this.applyFilter(this.dataSource.filter);\r\n  }\r\n\r\n  private updateRoles(role: Role) {\r\n    if (this.sourceRole) {\r\n      Object.assign(this.sourceRole, role);\r\n      this.sourceRole = null;\r\n    } else {\r\n      this.dataSource.data.push(role);\r\n    }\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  private loadData() {\r\n    this.loadingIndicator = true;\r\n\r\n    this.accountService.getRolesAndPermissions()\r\n      .subscribe(results => {\r\n          this.loadingIndicator = false;\r\n          this.dataSource.data = results[0];\r\n          this.allPermissions = results[1];\r\n        },\r\n        error => {\r\n          this.loadingIndicator = false;\r\n          // console.log(Utilities.getHttpResponseMessage(error));\r\n          this.alertService.error(`Error - \"${Utilities.getHttpResponseMessage(error)}\"`,\r\n            'Load Error');\r\n        });\r\n  }\r\n\r\n  private editRole(role?: Role) {\r\n    this.sourceRole = role;\r\n\r\n    const dialogRef = this.dialog.open(EditRoleDialogComponent,\r\n      {\r\n        panelClass: 'mat-dialog-md',\r\n        data: {role: role, allPermissions: this.allPermissions}\r\n      });\r\n    dialogRef.afterClosed().subscribe(role => {\r\n      if (role && this.canManageRoles) {\r\n        this.updateRoles(role);\r\n      }\r\n    });\r\n  }\r\n\r\n  private confirmDelete(role: Role) {\r\n    this.snackBar.open(`Delete ${role.Name} role?`, 'DELETE', {duration: 5000})\r\n      .onAction().subscribe(() => {\r\n      this.loadingIndicator = true;\r\n      this.accountService.deleteRole(role)\r\n        .subscribe(results => {\r\n            this.loadingIndicator = false;\r\n            this.dataSource.data = this.dataSource.data.filter(item => item !== role);\r\n          },\r\n          error => {\r\n            this.loadingIndicator = false;\r\n            // tslint:disable-next-line:max-line-length\r\n            this.alertService.error(`An error occured whilst deleting the role.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\r\n              'Delete Error');\r\n          });\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}