{"version":3,"sources":["webpack:///./src/app/Services/application-setting.service.ts","webpack:///./src/app/components/project-profile/project-cost/ProjectCost.module.ts","webpack:///./src/app/components/project-profile/project-cost/ProjectCostModuleRouting.ts","webpack:///./src/app/components/project-profile/project-cost/project-cost-list/project-cost-list.component.html","webpack:///./src/app/components/project-profile/project-cost/project-cost-list/project-cost-list.component.scss","webpack:///./src/app/components/project-profile/project-cost/project-cost-list/project-cost-list.component.ts","webpack:///./src/app/components/project-profile/project-cost/project-cost.component.css","webpack:///./src/app/components/project-profile/project-cost/project-cost.component.html","webpack:///./src/app/components/project-profile/project-cost/project-cost.component.ts"],"names":[],"mappings":"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","file":"components-project-profile-project-cost-ProjectCost-module~components-project-profile-project-module.js","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {ApplicationSettingModel} from '../model/ApplicationSetting.Model';\r\nimport {BaseService} from './Base.service';\r\nimport {ErrorMessage} from '@custor/services/errMessageService';\r\nimport {AppConfiguration} from '../config/appconfig';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApplicationSettingService extends BaseService<ApplicationSettingModel> {\r\n\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected appConfig: AppConfiguration,\r\n    protected  errMsg: ErrorMessage) {\r\n    super(http, appConfig.urls.url('ApplicationSettings'), errMsg);\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule} from '@custor/modules/shared.module';\r\nimport {ProjectCostModuleRouting} from './ProjectCostModuleRouting';\r\nimport {ProjectCostListComponent} from './project-cost-list/project-cost-list.component';\r\nimport {ProjectCostComponent} from './project-cost.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    ProjectCostModuleRouting\r\n  ],\r\n  declarations: [ProjectCostListComponent,\r\n    ProjectCostComponent],\r\n  exports: [ProjectCostListComponent, ProjectCostComponent]\r\n\r\n})\r\nexport class ProjectCostModule {\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {ProjectCostListComponent} from './project-cost-list/project-cost-list.component';\r\nimport {ProjectCostComponent} from './project-cost.component';\r\n\r\nconst costRoute: Routes = [\r\n  {path: '', component: ProjectCostListComponent},\r\n  {path: ':id', component: ProjectCostComponent},\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(costRoute)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProjectCostModuleRouting {\r\n\r\n\r\n}\r\n","module.exports = \"<table style=\\\"height: 320px;display: block;overflow: auto;\\\" class=\\\"scrollbar table full-width\\\">\\r\\n  <thead>\\r\\n  <th>No</th>\\r\\n  <th>Land Cost</th>\\r\\n  <th>Building Cost</th>\\r\\n  <th>Machinery Cost</th>\\r\\n  <th>Transport Cost</th>\\r\\n  <th>Office Equipment Cost</th>\\r\\n  <th>Other Capital Cost</th>\\r\\n  <th>Initial WorkingCapital Cost</th>\\r\\n  <th>EquityFinance</th>\\r\\n  <th>Loan Finance</th>\\r\\n  <th>Other Source Finance</th>\\r\\n  <th>Other Source Description</th>\\r\\n  <th>Unit</th>\\r\\n  <th>Actual Cost In Foreign</th>\\r\\n  <th>Remark</th>\\r\\n  <th>Action</th>\\r\\n\\r\\n  </thead>\\r\\n  <tbody style=\\\"overflow: auto;\\\">\\r\\n  <tr matTooltip=\\\"Planned cost\\\" class=\\\"planned\\\">\\r\\n    <td></td>\\r\\n    <td>{{plannedCost?.LandCost}}</td>\\r\\n    <td>{{plannedCost?.BuildingCost}}</td>\\r\\n    <td>{{plannedCost?.MachineryCost}}</td>\\r\\n    <td>{{plannedCost?.TransportCost}}</td>\\r\\n    <td>{{plannedCost?.OfficeEquipmentCost}}</td>\\r\\n    <td>{{plannedCost?.OtherCapitalCost}}</td>\\r\\n    <td>{{plannedCost?.InitialWorkingCapitalCost}}</td>\\r\\n    <td>{{plannedCost?.EquityFinance}}</td>\\r\\n    <td>{{plannedCost?.LoanFinance}}</td>\\r\\n    <td>{{plannedCost?.OtherSourceFinance}}</td>\\r\\n    <td>{{plannedCost?.OtherSourceDescription}}</td>\\r\\n    <td>{{plannedCost?.Unit}}</td>\\r\\n    <td>{{plannedCost?.ActualCostInForeign}}</td>\\r\\n    <td>{{plannedCost?.Remark}}</td>\\r\\n    <!--<td><a (click)=\\\"edit(plannedCost.ProjectCostId)\\\">-->\\r\\n    <!--<mat-icon class=\\\"mat-18\\\">edit</mat-icon>-->\\r\\n    <!--</a></td>-->\\r\\n  </tr>\\r\\n  <tr matTooltip=\\\"Actual Cost\\\" *ngFor=\\\"let cost of costList;let i=index;\\\">\\r\\n    <td>{{i+1}}</td>\\r\\n    <td>{{cost.LandCost}}</td>\\r\\n    <td>{{cost.BuildingCost}}</td>\\r\\n    <td>{{cost.MachineryCost}}</td>\\r\\n    <td>{{cost.TransportCost}}</td>\\r\\n    <td>{{cost.OfficeEquipmentCost}}</td>\\r\\n    <td>{{cost.OtherCapitalCost}}</td>\\r\\n    <td>{{cost.InitialWorkingCapitalCost}}</td>\\r\\n    <td>{{cost.EquityFinance}}</td>\\r\\n    <td>{{cost.LoanFinance}}</td>\\r\\n    <td>{{cost.OtherSourceFinance}}</td>\\r\\n    <td>{{cost.OtherSourceDescription}}</td>\\r\\n    <td>{{cost.Unit}}</td>\\r\\n    <td>{{cost.ActualCostInForeign}}</td>\\r\\n    <td>{{cost.Remark}}</td>\\r\\n    <td>\\r\\n      <a (click)=\\\"edit(cost.ProjectCostId)\\\">\\r\\n        <mat-icon class=\\\"mat-18\\\">edit</mat-icon>\\r\\n        <!--Compare-->\\r\\n      </a>\\r\\n      <!--<a (click)=\\\"edit(cost.ProjectCostId)\\\">-->\\r\\n        <!--<mat-icon class=\\\"mat-18\\\">edit</mat-icon>-->\\r\\n        <!--Compare-->\\r\\n      <!--</a>-->\\r\\n\\r\\n    </td>\\r\\n  </tr>\\r\\n  </tbody>\\r\\n</table>\\r\\n\"","module.exports = \".table td {\\n  padding: 4px 7px 4px 5px;\\n  font-size: 13px;\\n  border-top: 1px solid #FAFAFA; }\\n\\n.table th {\\n  padding: 4px 7px 4px 5px;\\n  font-size: 13px;\\n  border-top: 1px solid #FAFAFA; }\\n\\ntable tbody tr:nth-child(2) td {\\n  border: 1px solid #0d8055;\\n  background-color: #0d8055;\\n  color: white;\\n  font-weight: bolder; }\\n\"","import {Component, OnInit} from '@angular/core';\r\nimport {ProjectCostService} from '../../../../Services/project-cost.service';\r\nimport {ProjectCostModel} from '../../../../model/ProjectCost.model';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-project-cost-list',\r\n  templateUrl: './project-cost-list.component.html',\r\n  styleUrls: ['./project-cost-list.component.scss']\r\n})\r\nexport class ProjectCostListComponent implements OnInit {\r\n  public costList: ProjectCostModel[];\r\n  public plannedCost: ProjectCostModel;\r\n  private ProjectId: any;\r\n  private ServiceId: any;\r\n  private InvestorId: any;\r\n\r\n  constructor(public projectCostService: ProjectCostService,\r\n              private route: ActivatedRoute,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.ProjectId = this.route.snapshot.params['ProjectId'];\r\n    // this.ProjectId1 = this.route.snapshot.params['projectId'];\r\n    // this.ServiceId = this.route.snapshot.params['ServiceId'];\r\n    // this.InvestorId = this.route.snapshot.params['InvestorId'];\r\n    console.log(this.ProjectId)\r\n    // console.log(this.ProjectId1)\r\n    this.getAllCostByProjectId();\r\n    this.getPlannedCostByProjectId();\r\n  }\r\n\r\n  getAllCostByProjectId() {\r\n    this.projectCostService.getAllActualCost(this.ProjectId)\r\n      .subscribe(cost => {\r\n        this.costList = cost;\r\n      });\r\n\r\n  }\r\n\r\n  getPlannedCostByProjectId() {\r\n    this.projectCostService.getCostByProjectId(this.ProjectId)\r\n      .subscribe(cost => {\r\n        // console.log(cost);\r\n        this.plannedCost = cost;\r\n      });\r\n\r\n  }\r\n\r\n  edit(costId: any) {\r\n    this.router.navigate(['/project-cost/new', costId]);\r\n  }\r\n\r\n  back() {\r\n    window.history.back();\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<mat-card class=\\\"margin-2\\\">\\r\\n  <form [formGroup]=\\\"projectCostForm\\\" countryCity novalidate #costF>\\r\\n    <input type=\\\"number\\\" formControlName=\\\"ProjectId\\\" hidden>\\r\\n    <mat-card-subtitle class=\\\"sub-title\\\">\\r\\n      Project cost\\r\\n      <mat-divider></mat-divider>\\r\\n    </mat-card-subtitle>\\r\\n    <!--<div class=\\\"block\\\">{{projectCostForm.value | json}}</div>-->\\r\\n\\r\\n    <mat-card-content>\\r\\n\\r\\n      <div style=\\\"margin-bottom: 40px;\\\" *ngIf=\\\"ServiceId=='1234'\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\"\\r\\n           fxLayoutGap=\\\"2em\\\">\\r\\n        <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n          <mat-form-field>\\r\\n            <mat-label>Quarter</mat-label>\\r\\n            <mat-select formControlName=\\\"Quarter\\\" [compareWith]=\\\"compareIds\\\" required>\\r\\n              <mat-option *ngFor=\\\"let row of Quarter\\\" [value]=\\\"row.Id\\\">\\r\\n                <span>{{row.DescriptionEnglish}}</span>\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n\\r\\n        </div>\\r\\n        <!--<div class=\\\"block\\\" fxFlex=\\\"\\\">-->\\r\\n        <!--<mat-form-field>-->\\r\\n        <!--<input formControlName=\\\"ExchangeRate\\\"-->\\r\\n        <!--type=\\\"number\\\"-->\\r\\n        <!--matInput placeholder=\\\"Exchange Rate  :\\\">-->\\r\\n        <!--<mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.ExchangeRate\\\" class=\\\"form__error\\\">{{ formErrors.ExchangeRate }}-->\\r\\n        <!--</mat-error>-->\\r\\n        <!--</mat-form-field>-->\\r\\n        <!--</div>-->\\r\\n        <div class=\\\"block\\\" fxFlex>\\r\\n          <mat-form-field>\\r\\n            <input placeholder=\\\"Registration Year* :\\\"\\r\\n                   matInput\\r\\n                   formControlName=\\\"ReagistrationYear\\\"\\r\\n                   [matDatepicker]=\\\"ReagistrationYear\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"ReagistrationYear\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #ReagistrationYear></mat-datepicker>\\r\\n            <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.ReagistrationYear\\\" class=\\\"form__error\\\">\\r\\n              {{ formErrors.ReagistrationYear }}\\r\\n            </mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <!--<div class=\\\"block\\\" fxFlex=\\\"\\\">-->\\r\\n        <!---->\\r\\n        <!--<mat-form-field>-->\\r\\n        <!--<input #OSF type=\\\"number\\\" formControlName=\\\"CapitalRegistrationDatetime\\\" matInput-->\\r\\n        <!--placeholder=\\\"Capital Registration Datetime * :\\\">-->\\r\\n        <!---->\\r\\n        <!--</mat-form-field>-->\\r\\n        <!--</div>-->\\r\\n        <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n\\r\\n          <mat-form-field>\\r\\n            <mat-select [disabled]=\\\"true\\\" formControlName=\\\"ProjectStatus\\\" [compareWith]=\\\"compareIds\\\" required>\\r\\n              <option value=\\\"0\\\">--Select--</option>\\r\\n              <label>Project Status</label>\\r\\n              <mat-option *ngFor=\\\"let status of projectStatus\\\" [value]=\\\"status.Id\\\">\\r\\n                <span>{{status.DescriptionEnglish}}</span>\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </div>\\r\\n      <mat-card-subtitle class=\\\"sub-title\\\" *ngIf=\\\"!(ServiceId=='1234' && (ServiceId=='1234' && editMode))\\\">\\r\\n        Cost Break Down\\r\\n        <mat-divider></mat-divider>\\r\\n      </mat-card-subtitle>\\r\\n\\r\\n      <div *ngIf=\\\"!(ServiceId=='1234' && editMode)\\\">\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"2em\\\">\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"LandCost\\\" #LC matInput type=\\\"number\\\" placeholder=\\\"Land Cost * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.LandCost\\\" class=\\\"form__error\\\">{{ formErrors.LandCost }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"BuildingCost\\\" #BC matInput type=\\\"number\\\" placeholder=\\\"Building Cost * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.BuildingCost\\\" class=\\\"form__error\\\">{{ formErrors.BuildingCost }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"MachineryCost\\\" #MC matInput type=\\\"number\\\" placeholder=\\\"Machinery Cost * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.MachineryCost\\\" class=\\\"form__error\\\">\\r\\n                {{ formErrors.MachineryCost }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input matInput formControlName=\\\"TransportCost\\\" type=\\\"number\\\" #TC placeholder=\\\"TransportCost * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.TransportCost\\\" class=\\\"form__error\\\">\\r\\n                {{ formErrors.TransportCost }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" fxLayoutGap=\\\"2em\\\">\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"OfficeEquipmentCost\\\" type=\\\"number\\\" #OEC matInput\\r\\n                     placeholder=\\\"Office Equipment Cost * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.OfficeEquipmentCost\\\" class=\\\"form__error\\\">{{\\r\\n                formErrors.OfficeEquipmentCost }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"OtherCapitalCost\\\" type=\\\"number\\\" #OCC matInput\\r\\n                     placeholder=\\\"Other Capital Cost * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.OtherCapitalCost\\\" class=\\\"form__error\\\">{{\\r\\n                formErrors.OtherCapitalCost }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"InitialWorkingCapitalCost\\\"\\r\\n                     type=\\\"number\\\" matInput #IWCC placeholder=\\\"Initial Working Capital Cost * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.InitialWorkingCapitalCost\\\" class=\\\"form__error\\\">{{\\r\\n                formErrors.InitialWorkingCapitalCost }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input\\r\\n\\r\\n                type=\\\"number\\\"\\r\\n                #TotalCost\\r\\n                matInput formControlName=\\\"Total\\\" placeholder=\\\"Total\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <mat-card-subtitle class=\\\"sub-title\\\">\\r\\n          Source of Finance\\r\\n          <mat-divider></mat-divider>\\r\\n        </mat-card-subtitle>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"2em\\\">\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"EquityFinance\\\"\\r\\n                     type=\\\"number\\\"\\r\\n                     #EF\\r\\n                     matInput placeholder=\\\"Equity Finance\\\">\\r\\n              <!--<mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.EquityFinance\\\" class=\\\"form__error\\\">-->\\r\\n              <!--{{ formErrors.EquityFinance }}-->\\r\\n              <!--</mat-error>-->\\r\\n\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"LoanFinance\\\"\\r\\n                     type=\\\"number\\\"\\r\\n                     #LF\\r\\n                     matInput placeholder=\\\"Loan Finance * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.LoanFinance\\\" class=\\\"form__error\\\">{{ formErrors.LoanFinance }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input #OSF type=\\\"number\\\" formControlName=\\\"OtherSourceFinance\\\" matInput\\r\\n                     placeholder=\\\"Other Source Finance * :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.OtherSourceFinance\\\" class=\\\"form__error\\\">\\r\\n                {{ formErrors.OtherSourceFinance }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n            <mat-form-field>\\r\\n              <input formControlName=\\\"OtherSourceDescription\\\" matInput placeholder=\\\"Other Source Description  :\\\">\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.OtherSourceDescription\\\" class=\\\"form__error\\\">\\r\\n                {{ formErrors.OtherSourceDescription }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"2em\\\">\\r\\n          <mat-error\\r\\n            *ngIf=\\\"projectCostForm.hasError('sumIsNotEqual') && (projectCostForm.touched || projectCostForm.dirty)\\\"\\r\\n            class=\\\"error\\\">\\r\\n            The cost break down and sum of source of finance must be equal!\\r\\n          </mat-error>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"2em\\\">\\r\\n          <div fxLayout=\\\"column\\\" class=\\\"block\\\" fxFlex=\\\"25\\\">\\r\\n\\r\\n            <div class=\\\"block\\\">\\r\\n              <mat-form-field>\\r\\n\\r\\n                <mat-label>Currency Type</mat-label>\\r\\n                <mat-select [disabled]=\\\"true\\\" formControlName=\\\"Unit\\\" [compareWith]=\\\"compareIds\\\" required>\\r\\n                  <option value=\\\"0\\\">--Select--</option>\\r\\n                  <mat-option *ngFor=\\\"let currency of currencyTypes\\\" [value]=\\\"currency.Id\\\">\\r\\n                    <span>{{currency.DescriptionEnglish}}</span>\\r\\n                  </mat-option>\\r\\n                </mat-select>\\r\\n\\r\\n                <!--<mat-label>Unit :</mat-label>-->\\r\\n                <!--<input matInput formControlName=\\\"Unit\\\" type=\\\"text\\\" required placeholder=\\\"\\\">-->\\r\\n                <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.Unit\\\" class=\\\"form__error\\\">{{ formErrors.Unit }}\\r\\n                </mat-error>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n          <div class=\\\"block\\\" fxFlex=\\\"75\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-label>Remark :</mat-label>\\r\\n              <textarea matInput formControlName=\\\"Remark\\\" rows=\\\"4\\\"></textarea>\\r\\n              <mat-error align=\\\"start\\\" *ngIf=\\\"formErrors?.Remark\\\" class=\\\"form__error\\\">\\r\\n                {{ formErrors.Remark }}\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n\\r\\n    </mat-card-content>\\r\\n\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <div style=\\\"padding-top: 20px\\\" align=\\\"center\\\">\\r\\n\\r\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" fxLayoutGap=\\\"2em\\\">\\r\\n\\r\\n        <div fxFlex=\\\"15\\\">\\r\\n\\r\\n        </div>\\r\\n        <div style=\\\"text-align: center\\\" fxFlex=\\\"67\\\" fxFlexAlign=\\\"center\\\">\\r\\n          <button [disabled]=\\\"!projectCostForm.valid\\\" mat-raised-button=\\\"\\\" color=\\\"primary\\\" (click)=\\\"onSubmit()\\\">\\r\\n            <mat-icon class=\\\"mat-18\\\">done</mat-icon>\\r\\n            <span class=\\\"agree\\\">{{editMode ? 'update' : 'Save'}}</span>\\r\\n          </button>\\r\\n\\r\\n        </div>\\r\\n        <div fxFlex=\\\"15\\\">\\r\\n\\r\\n          <!--<button class=\\\"custom-button\\\" (click)=\\\"next()\\\" color=\\\"warn\\\" type=\\\"button\\\">-->\\r\\n          <!--Next-->\\r\\n          <!--</button>-->\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n    <!--<app-show-errors [control]=\\\"projectCostForm\\\"></app-show-errors>-->\\r\\n    <!--<pre>{{projectCostForm.value | json}}</pre>-->\\r\\n  </form>\\r\\n</mat-card>\\r\\n\"","import {AfterContentChecked, Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ValidationErrors,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport {ProjectCostModel} from '../../../model/ProjectCost.model';\r\nimport {MatSnackBar} from '@angular/material';\r\n\r\nimport {ProjectCostService} from '../../../Services/project-cost.service';\r\nimport {DataSharingService} from '../../../Services/data-sharing.service';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {FormService} from '@custor/validation/custom/form';\r\nimport {ActivatedRoute, Params} from '@angular/router';\r\nimport {ProjectProfileService} from '../../../Services/project-profile.service';\r\nimport {ErrorMessage} from '@custor/services/errMessageService';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {CurrencyType, ProjectStatusModel, QuarterModel} from '../../../model/lookupData';\r\nimport {CurrencyTypes, ProjectStatus, Quarter} from '@custor/const/consts';\r\nimport {determineId} from '@custor/helpers/compare';\r\nimport {ApplicationSettingService} from '../../../Services/application-setting.service';\r\n\r\n@Component({\r\n  selector: 'app-project-cost',\r\n  templateUrl: './project-cost.component.html',\r\n  styleUrls: ['./project-cost.component.css']\r\n})\r\nexport class ProjectCostComponent implements OnInit, OnDestroy, AfterContentChecked {\r\n  editMode = false;\r\n  loading = false;\r\n  subscription: Subscription;\r\n  costId: number;\r\n  projectId: number;\r\n  projectCostForm: FormGroup;\r\n  projectCost: ProjectCostModel;\r\n  public formErrors = {\r\n    LandCost: '',\r\n    BuildingCost: '',\r\n    MachineryCost: '',\r\n    TransportCost: '',\r\n    OfficeEquipmentCost: '',\r\n    OtherCapitalCost: '',\r\n    InitialWorkingCapitalCost: '',\r\n    EquityFinance: '',\r\n    LoanFinance: '',\r\n    OtherSourceFinance: '',\r\n    OtherSourceDescription: '',\r\n    Unit: '',\r\n    ExchangeRate: '',\r\n    CapitalRegistrationDatetime: '',\r\n    ActualCostInForeign: '',\r\n    Quarter: '',\r\n    ReagistrationYear: '',\r\n    Remark: ''\r\n  };\r\n  currencyTypes: CurrencyType[] = [];\r\n  projectStatus: ProjectStatusModel[] = [];\r\n  private ExchangeRate: string;\r\n  public ServiceId: string;\r\n  public Quarter: QuarterModel[] = [];\r\n  private sumOfPlan: number;\r\n  private InvestorId: any;\r\n  private workFlowId: any;\r\n  private ServiceApplicationId: any;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n              public formService: FormService,\r\n              public settingService: ApplicationSettingService,\r\n              public toastr: ToastrService,\r\n              public route: ActivatedRoute,\r\n              public snackbar: MatSnackBar,\r\n              public errMsg: ErrorMessage,\r\n              private projectProfileService: ProjectProfileService,\r\n              private projectCostService: ProjectCostService,\r\n              private dataSharing: DataSharingService) {\r\n    this.projectCost = <ProjectCostModel>{};\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.ServiceId = this.route.snapshot.params['ServiceId'];\r\n    this.InvestorId = this.route.snapshot.params['InvestorId'];\r\n    this.workFlowId = this.route.snapshot.params['workFlowId'];\r\n    this.ServiceApplicationId = this.route.snapshot.params['ServiceApplicationId'];\r\n    this.projectId = this.route.snapshot.params['ProjectId']\r\n\r\n\r\n    if (this.ServiceId == '1234') {\r\n      // this.projectId = this.route.snapshot.params['ProjectId']\r\n      this.getProjectStatus(this.projectId);\r\n    }\r\n    if (this.projectId > 1 && this.ServiceId == '13') {\r\n      this.getProjectCost();\r\n    }\r\n    this.initStaticData('en');\r\n\r\n    this.formBuild();\r\n    this.getExchangeRate();\r\n    this.formControlValueChanged();\r\n  }\r\n\r\n  getProjectCost() {\r\n    this.projectCostService.getCostByProjectId(this.projectId)\r\n      .subscribe(result => {\r\n        if (typeof (result) !== 'undefined') {\r\n          this.editMode = true;\r\n          this.costId = result.ProjectCostId;\r\n          this.projectCostForm.patchValue(result);\r\n        }\r\n      }, error => this.errMsg.getError(error));\r\n  }\r\n\r\n  initStaticData(currentLang) {\r\n    let quan: CurrencyType = new CurrencyType();\r\n    CurrencyTypes.forEach(pair => {\r\n      quan = {'Id': pair.Id.toString(), 'DescriptionEnglish': pair.DescriptionEnglish, 'Description': pair.Description};\r\n      this.currencyTypes.push(quan);\r\n    });\r\n    let projectStatus1: ProjectStatusModel = new ProjectStatusModel();\r\n    ProjectStatus.forEach(pair => {\r\n      projectStatus1 = {\r\n        'Id': pair.Id.toString(),\r\n        'DescriptionEnglish': pair.DescriptionEnglish,\r\n        'Description': pair.Description\r\n      };\r\n      this.projectStatus.push(projectStatus1);\r\n    });\r\n\r\n    let Quarter1: QuarterModel = new QuarterModel();\r\n    Quarter.forEach(pair => {\r\n      Quarter1 = {\r\n        'Id': pair.Id.toString(),\r\n        'DescriptionEnglish': pair.DescriptionEnglish,\r\n        'Description': pair.Description\r\n      };\r\n      this.Quarter.push(Quarter1);\r\n    });\r\n\r\n  }\r\n\r\n  onSubmit() {\r\n    this.formService.markFormGroupTouched(this.projectCostForm);\r\n    if (this.projectCostForm.valid) {\r\n      if (!this.editMode) {\r\n        this.projectCostService.create(this.projectCostForm.value)\r\n          .subscribe(result => {\r\n            setTimeout(() => this.dataSharing.steeperIndex.next(5), 0);\r\n            setTimeout(() => this.dataSharing.currentIndex.next(5), 0);\r\n            this.notification('saved');\r\n          });\r\n      } else {\r\n        this.projectCostService.update(this.projectCostForm.value, this.costId)\r\n          .subscribe(result => {\r\n            this.notification('updated');\r\n          });\r\n      }\r\n    } else {\r\n      this.formErrors = this.formService.validateForm(this.projectCostForm, this.formErrors, false);\r\n    }\r\n  }\r\n\r\n  onClear() {\r\n    this.projectCostForm.reset();\r\n  }\r\n\r\n\r\n  formBuild() {\r\n    this.projectCostForm = new FormGroup({\r\n      ProjectId: new FormControl(this.projectId),\r\n      workFlowId: new FormControl(this.workFlowId),\r\n      LandCost: new FormControl(0, Validators.compose([Validators.required, Validators.min(0)])),\r\n      BuildingCost: new FormControl(0, Validators.compose([Validators.required, Validators.min(0)])),\r\n      MachineryCost: new FormControl(0, Validators.compose([Validators.required, Validators.min(0)])),\r\n      TransportCost: new FormControl(0, Validators.compose([Validators.required, Validators.min(0)])),\r\n      OfficeEquipmentCost: new FormControl(0, Validators.compose([Validators.required, Validators.min(0)])),\r\n      OtherCapitalCost: new FormControl(0, Validators.compose([Validators.required, Validators.min(0)])),\r\n      InitialWorkingCapitalCost: new FormControl(0, Validators.compose([Validators.required, Validators.min(0)])),\r\n      EquityFinance: new FormControl(0),\r\n\r\n      LoanFinance: new FormControl(0),\r\n      OtherSourceFinance: new FormControl(0),\r\n      OtherSourceDescription: new FormControl(0),\r\n\r\n      ActualCostInForeign: new FormControl(''),\r\n      Unit: new FormControl('1'),\r\n      Quarter: new FormControl(''),\r\n      CapitalRegistrationDatetime: new FormControl(''),\r\n      ReagistrationYear: new FormControl(''),\r\n      ProjectStatus: new FormControl(''),\r\n      ExchangeRate: new FormControl(''),\r\n      Remark: new FormControl(''),\r\n      Total: new FormControl('')\r\n    }, {validators: sumOfSourceFinanceValidator});\r\n\r\n    this.projectCostForm.valueChanges.subscribe((data) => {\r\n      this.formErrors = this.formService.validateForm(this.projectCostForm, this.formErrors, true);\r\n\r\n\r\n    });\r\n    this.projectCostForm.get('Total').valueChanges.subscribe(\r\n      (intLegal: number) => {\r\n        this.sumOfPlan = intLegal;\r\n      });\r\n  }\r\n\r\n\r\n  private getProjectCostData(): ProjectCostModel {\r\n    const formModel = this.projectCostForm.value;\r\n\r\n    return {\r\n      ProjectId: this.projectId,\r\n      workFlowId: this.workFlowId,\r\n      LandCost: formModel.LandCost,\r\n      BuildingCost: formModel.BuildingCost,\r\n      MachineryCost: formModel.MachineryCost,\r\n      TransportCost: formModel.TransportCost,\r\n      OfficeEquipmentCost: formModel.OfficeEquipmentCost,\r\n      ActualCostInForeign: formModel.ActualCostInForeign,\r\n      OtherCapitalCost: formModel.OtherCapitalCost,\r\n      InitialWorkingCapitalCost: formModel.InitialWorkingCapitalCost,\r\n      EquityFinance: formModel.sourceOfFinance.EquityFinance,\r\n      LoanFinance: formModel.sourceOfFinance.LoanFinance,\r\n      OtherSourceFinance: formModel.sourceOfFinance.OtherSourceFinance,\r\n      OtherSourceDescription: formModel.OtherSourceDescription,\r\n      Unit: formModel.Unit,\r\n      Quarter: formModel.Quarter,\r\n      CapitalRegistrationDatetime: formModel.CapitalRegistrationDatetime,\r\n      RegistrationYear: formModel.RegistrationYear,\r\n      ProjectStatus: formModel.ProjectStatus,\r\n      ExchangeRate: formModel.ExchangeRate,\r\n      Remark: formModel.Remark\r\n    };\r\n  }\r\n\r\n\r\n  compareIds(id1: any, id2: any): boolean {\r\n    const a1 = determineId(id1);\r\n    const a2 = determineId(id2);\r\n    return a1 === a2;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // this.subscription.unsubscribe();\r\n  }\r\n\r\n  notification(message: string) {\r\n    this.toastr.success(` Succesfully ${message} Data.!`, 'Success');\r\n\r\n    this.loading = false;\r\n    this.snackbar.open(` Succesfully ${message} Data.!`, 'Close', {\r\n      duration: 3000,\r\n    });\r\n  }\r\n\r\n  getExchangeRate() {\r\n    this.settingService.getOneById(1)\r\n      .subscribe(result => {\r\n        this.ExchangeRate = result.Value;\r\n\r\n      });\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    // this.projectCostForm.patchValue({\r\n    //   ProjectId: localStorage.getItem('ProjectId')\r\n    // });\r\n    // this.projectCostForm.patchValue({\r\n    //   workFlowId: localStorage.getItem('workFlowId')\r\n    // });\r\n    this.projectCostForm.patchValue({\r\n      ExchangeRate: this.ExchangeRate\r\n    });\r\n\r\n\r\n    this.sumAll();\r\n\r\n  }\r\n\r\n  next() {\r\n    this.dataSharing.steeperIndex.next(4);\r\n\r\n  }\r\n\r\n  private getProjectStatus(projectId: any) {\r\n    this.projectProfileService.getProjectStatus(projectId)\r\n      .subscribe(result => {\r\n        this.projectCostForm.patchValue({\r\n          ProjectStatus: result.toString()\r\n        });\r\n      });\r\n  }\r\n\r\n  formControlValueChanged() {\r\n\r\n\r\n  }\r\n\r\n  private sumAll() {\r\n    const total = this.projectCostForm.get('LandCost').value +\r\n      this.projectCostForm.get('BuildingCost').value +\r\n      this.projectCostForm.get('MachineryCost').value +\r\n      this.projectCostForm.get('TransportCost').value +\r\n      this.projectCostForm.get('OfficeEquipmentCost').value +\r\n      this.projectCostForm.get('OtherCapitalCost').value +\r\n      this.projectCostForm.get('InitialWorkingCapitalCost').value;\r\n\r\n\r\n    this.projectCostForm.patchValue({\r\n      Total: total\r\n    });\r\n  }\r\n}\r\n\r\nexport const sumOfSourceFinanceValidator: ValidatorFn = (control: FormGroup): ValidationErrors | null => {\r\n  const loanFinance: AbstractControl | null = control.get('LoanFinance');\r\n  const equityFinance: AbstractControl | null = control.get('EquityFinance');\r\n  const otherSourceFinance: AbstractControl | null = control.get('OtherSourceFinance');\r\n  const total: AbstractControl | null = control.get('Total');\r\n\r\n  const sourceTotal = loanFinance.value + equityFinance.value + otherSourceFinance.value;\r\n  return sourceTotal !== total.value ? {'sumIsNotEqual': true} : null;\r\n};\r\n\r\n\r\n"],"sourceRoot":""}