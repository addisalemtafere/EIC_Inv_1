{"version":3,"sources":["webpack:///./src/app/Services/project-cancellation.service.ts","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation-routing.ts","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation-tab.component.html","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation-tab.component.scss","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation-tab.component.ts","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation-tab.module.ts","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation/project-cancellation.component.html","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation/project-cancellation.component.scss","webpack:///./src/app/components/project-profile/project-cancellation-tab/project-cancellation/project-cancellation.component.ts","webpack:///./src/app/model/EnumModel.ts"],"names":[],"mappings":"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","file":"app-components-project-profile-project-cancellation-tab-project-cancellation-tab-module.js","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {BaseService} from './Base.service';\r\nimport {ProjectCancellationModel} from '../model/project/ProjectCancellation.model';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {AppConfiguration} from '../config/appconfig';\r\nimport {ErrorMessage} from '@custor/services/errMessageService';\r\nimport {Observable} from 'rxjs/internal/Observable';\r\nimport {catchError} from 'rxjs/operators';\r\nimport {ServiceApplicationModel} from '../model/ServiceApplication.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectCancellationService extends BaseService<ProjectCancellationModel> {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected appConfig: AppConfiguration,\r\n    protected  errMsg: ErrorMessage) {\r\n    super(http, appConfig.urls.url('ProjectCancellations'), errMsg);\r\n  }\r\n\r\n  getCancellationByServiceApplicationId(id: number): Observable<ServiceApplicationModel> {\r\n    return this.httpClient.get<ServiceApplicationModel>(this.appConfig.urls.url('ServiceApplicationCancellation') + '/' + id).pipe(\r\n      catchError(this.errMsg.parseObservableResponseError));\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {ProjectCancellationTabComponent} from './project-cancellation-tab.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: ProjectCancellationTabComponent},\r\n  {path: ':id', component: ProjectCancellationTabComponent},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProjectCancellationRouting {\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"0\\\">\\r\\n  <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n    <app-page-header title=\\\"projectCancellation\\\" icon=\\\"\\\"></app-page-header>\\r\\n\\r\\n  </div>\\r\\n  <div id=\\\"title1\\\" class=\\\"block\\\" fxFlex=\\\"50\\\">\\r\\n    <span class=\\\"page-title\\\">{{title}}</span>\\r\\n    <span class=\\\"slideBorder\\\">/</span>\\r\\n    <span class=\\\"page-title\\\">{{investorName}}</span>\\r\\n    <span class=\\\"slideBorder\\\">/</span>\\r\\n    <span class=\\\"page-title\\\">{{projectName}}</span>\\r\\n\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n<mat-tab-group [selectedIndex]=\\\"renewalIndex\\\">\\r\\n\\r\\n  <mat-tab label=\\\"Service Info\\\">\\r\\n    <ng-template matTabContent>\\r\\n      <app-service-info></app-service-info>\\r\\n    </ng-template>\\r\\n  </mat-tab>\\r\\n\\r\\n  <mat-tab *ngIf=\\\"!isInvestor\\\" label=\\\"After Care Recommendation\\\">\\r\\n    <ng-template matTabContent>\\r\\n      <app-aftercare-recommendation></app-aftercare-recommendation>\\r\\n    </ng-template>\\r\\n  </mat-tab>\\r\\n\\r\\n  <mat-tab label=\\\"Project Cancellation\\\">\\r\\n    <ng-template matTabContent>\\r\\n      <app-project-cancellation></app-project-cancellation>\\r\\n    </ng-template>\\r\\n  </mat-tab>\\r\\n\\r\\n  <mat-tab *ngIf=\\\"!isInvestor\\\" label=\\\"Message\\\">\\r\\n    <ng-template matTabContent>\\r\\n      <mat-card class=\\\"margin-2 simple-card\\\">\\r\\n        <mat-card-header>\\r\\n          <mat-card-subtitle class=\\\"sub-title\\\"></mat-card-subtitle>\\r\\n          <button class=\\\"margin-10 certificate-title\\\" mat-raised-button=\\\"\\\"\\r\\n                  (click)=\\\"addMessage()\\\" color=\\\"primary\\\">\\r\\n            Add Message\\r\\n          </button>\\r\\n        </mat-card-header>\\r\\n      </mat-card>\\r\\n      <!--<app-service-prerequisite></app-service-prerequisite>-->\\r\\n    </ng-template>\\r\\n  </mat-tab>\\r\\n\\r\\n  <!--<mat-tab *ngIf=\\\"!isInvestor\\\" label=\\\"Payment\\\">-->\\r\\n  <!--<ng-template matTabContent>-->\\r\\n  <!--<app-payment></app-payment>-->\\r\\n  <!--</ng-template>-->\\r\\n  <!--</mat-tab>-->\\r\\n  <!--<mat-tab *ngIf=\\\"!isInvestor\\\" label=\\\"Certificate\\\">-->\\r\\n  <!--<ng-template matTabContent>-->\\r\\n  <!--<app-certificate></app-certificate>-->\\r\\n  <!--</ng-template>-->\\r\\n  <!--</mat-tab>-->\\r\\n\\r\\n  <mat-tab *ngIf=\\\"isInvestor\\\" label=\\\"Confirmation\\\">\\r\\n    <ng-template matTabContent>\\r\\n      <app-service-confirmation></app-service-confirmation>\\r\\n    </ng-template>\\r\\n  </mat-tab>\\r\\n  <mat-tab *ngIf=\\\"!isInvestor\\\" label=\\\"Letter\\\">\\r\\n    <ng-template matTabContent>\\r\\n      <app-letter></app-letter>\\r\\n    </ng-template>\\r\\n  </mat-tab>\\r\\n</mat-tab-group>\\r\\n\\r\\n\"","module.exports = \"\"","import {Component, OnInit} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {AccountService} from '@custor/services/security/account.service';\r\nimport {DataSharingService} from '../../../Services/data-sharing.service';\r\nimport {NotificationComponent} from '../notification/notification.component';\r\nimport {MatDialog, MatDialogConfig} from '@angular/material';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-project-cancellation-tab',\r\n  templateUrl: './project-cancellation-tab.component.html',\r\n  styleUrls: ['./project-cancellation-tab.component.scss']\r\n})\r\nexport class ProjectCancellationTabComponent implements OnInit {\r\n\r\n  public isInvestor: boolean;\r\n  public title: string | null;\r\n  private subscription: Subscription;\r\n  public renewalIndex: any;\r\n  public projectName: string | null;\r\n  public investorName: string | null;\r\n  private ServiceApplicationId: any;\r\n  private userName: string;\r\n\r\n  constructor(public accountService: AccountService,\r\n              public dialog: MatDialog,\r\n              public route: ActivatedRoute,\r\n              private dataSharing: DataSharingService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getUserType();\r\n    this.subscription = this.dataSharing.renewalIndex\r\n      .subscribe(index => {\r\n        this.renewalIndex = index;\r\n\r\n      });\r\n    this.title = localStorage.getItem('title');\r\n    this.projectName = localStorage.getItem('projectName');\r\n    this.investorName = localStorage.getItem('investorName');\r\n    this.ServiceApplicationId = this.route.snapshot.params['ServiceApplicationId'];\r\n\r\n    this.userName = this.accountService.currentUser.FullName;\r\n  }\r\n\r\n  getUserType() {\r\n    this.isInvestor = this.accountService.getUserType();\r\n  }\r\n\r\n  addMessage() {\r\n    const dialogConfig = new MatDialogConfig();\r\n\r\n    dialogConfig.data = {\r\n      ServiceApplicationId: this.ServiceApplicationId,\r\n      title: 'Angular For Beginners'\r\n    };\r\n    this.dialog.open(NotificationComponent, dialogConfig);\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule} from '@custor/modules/shared.module';\r\nimport {ProjectCancellationRouting} from './project-cancellation-routing';\r\nimport {ServiceInfoModule} from '../service-info/serviceInfo.module';\r\nimport {OfficerModule} from '../../officer-Task/officer.module';\r\nimport {ServiceConfirmationModule} from '../service-confirmation/ServiceConfirmation.module';\r\nimport {ProjectCancellationTabComponent} from './project-cancellation-tab.component';\r\nimport {ProjectCancellationComponent} from './project-cancellation/project-cancellation.component';\r\nimport {LetterModule} from '../letter/letter.module';\r\nimport {ServicePrerequisiteModule} from '../service-prerequisite/ServicePrerequisiteModule';\r\nimport {AftercareRecommModule} from \"../aftercare-recomendation/AftercareRecommModule\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    ProjectCancellationRouting,\r\n    OfficerModule,\r\n    ServiceConfirmationModule,\r\n    ServiceInfoModule,\r\n    LetterModule,\r\n    AftercareRecommModule\r\n    // ServicePrerequisiteModule\r\n  ],\r\n  declarations: [\r\n    ProjectCancellationTabComponent,\r\n    ProjectCancellationComponent\r\n  ]\r\n})\r\nexport class ProjectCancellationTabModule {\r\n\r\n}\r\n","module.exports = \"<form style=\\\"padding: 2px\\\" (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"projectCancellationForm\\\" novalidate>\\r\\n\\r\\n  <mat-card>\\r\\n    <mat-card-subtitle class=\\\"sub-title\\\">\\r\\n      Project Cancellation\\r\\n      <mat-divider></mat-divider>\\r\\n    </mat-card-subtitle>\\r\\n    <mat-card-content>\\r\\n\\r\\n      <div fxLayout=\\\"row wrap\\\"\\r\\n           fxLayoutAlign=\\\"start center\\\"\\r\\n           class=\\\"content\\\"\\r\\n           fxLayout.lt-sm=\\\"column\\\"\\r\\n           fxLayoutGap=\\\"2em\\\">\\r\\n        <!--<div class=\\\"block\\\" fxFlex=\\\"\\\" *ngIf=\\\"!isInvestor\\\">-->\\r\\n          <!--<mat-form-field class=\\\"full-width\\\">-->\\r\\n            <!--<mat-label>Project Name</mat-label>-->\\r\\n            <!--<mat-select formControlName=\\\"ProjectId\\\">-->\\r\\n              <!--<mat-option *ngFor=\\\"let project of projectList\\\" [value]=\\\"project.ProjectId\\\">-->\\r\\n                <!--{{project.ProjectName}}-->\\r\\n              <!--</mat-option>-->\\r\\n            <!--</mat-select>-->\\r\\n          <!--</mat-form-field>-->\\r\\n        <!--</div>-->\\r\\n\\r\\n        <div class=\\\"block\\\" fxFlex=\\\"\\\">\\r\\n          <mat-form-field>\\r\\n            <mat-label>Cancellation Reason</mat-label>\\r\\n            <mat-select formControlName=\\\"CancellationReason\\\">\\r\\n              <mat-option *ngFor=\\\"let data of projectCancellationReasonList;let i=index\\\" [value]=\\\"data.Id\\\">\\r\\n                {{data.Desc}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"block\\\" fxFlex>\\r\\n          <mat-form-field>\\r\\n            <input placeholder=\\\"Cancellation Date * :\\\"\\r\\n                   matInput\\r\\n                   formControlName=\\\"CancellationDate\\\"\\r\\n                   [matDatepicker]=\\\"CancellationDate\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"CancellationDate\\\">\\r\\n            </mat-datepicker-toggle>\\r\\n            <mat-datepicker #CancellationDate></mat-datepicker>\\r\\n            <!--<mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.terminationDate\\\">{{ formErrors.terminationDate }}</mat-error>-->\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"blocks\\\" fxFlex=\\\"80%\\\">\\r\\n          <mat-form-field class=\\\"full-width\\\">\\r\\n            <input matInput\\r\\n                   placeholder=\\\"Remark\\\"\\r\\n                   formControlName=\\\"CancellationRemark\\\">\\r\\n            <!--<mat-error align=\\\"start\\\" *ngIf=\\\"formErrors.StartDate\\\">{{ formErrors.StartDate }}</mat-error>-->\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\">\\r\\n        <div mat-dialog-actions fxLayoutGap=\\\"3em\\\">\\r\\n          <button\\r\\n                  [disabled]=\\\"!projectCancellationForm.valid\\\"\\r\\n                  mat-raised-button=\\\"\\\"\\r\\n                  type=\\\"submit\\\"\\r\\n                  color=\\\"primary\\\">\\r\\n            <mat-icon class=\\\"mat-18\\\">done</mat-icon>\\r\\n            <span class=\\\"agree\\\">Save</span>\\r\\n            <!--{{editMode ? 'Update' : 'Save'}}-->\\r\\n          </button>\\r\\n          <!--<button *ngIf=\\\"editMode\\\" mat-raised-button (click)=\\\"approve()\\\" color=\\\"primary\\\" type=\\\"button\\\">-->\\r\\n          <!--<mat-icon class=\\\"mat-18\\\">done</mat-icon>-->\\r\\n          <!--<span>Approve</span>-->\\r\\n          <!--</button>-->\\r\\n        </div>\\r\\n      </div>\\r\\n    </mat-card-content>\\r\\n  </mat-card>\\r\\n</form>\\r\\n\\r\\n<div *ngIf=\\\"loading\\\" class=\\\"loadme-circleBounce\\\">\\r\\n  <div class=\\\"loadme-circleBounce1\\\"></div>\\r\\n  <div class=\\\"loadme-circleBounce2\\\"></div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import {AfterContentChecked, Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\r\nimport {ProjectCancellationService} from '../../../../Services/project-cancellation.service';\r\nimport {ProjectProfileService} from '../../../../Services/project-profile.service';\r\nimport {ProjectModel} from '../../../../model/project.model';\r\nimport {DataSharingService} from '../../../../Services/data-sharing.service';\r\nimport {MatSnackBar} from '@angular/material';\r\nimport {AccountService} from '@custor/services/security/account.service';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {ErrorMessage} from '@custor/services/errMessageService';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {CancellationReason} from '@custor/const/consts';\r\nimport {CancellationReasonModel} from '../../../../model/EnumModel';\r\nimport {ConfigurationService} from '@custor/services/configuration.service';\r\nimport {Lookup} from '../../../../model/lookupData';\r\nimport {ServiceApplicationService} from '../../../../Services/service-application.service';\r\n\r\n@Component({\r\n  selector: 'app-project-cancellation',\r\n  templateUrl: './project-cancellation.component.html',\r\n  styleUrls: ['./project-cancellation.component.scss']\r\n})\r\nexport class ProjectCancellationComponent implements OnInit {\r\n  projectCancellationForm: FormGroup;\r\n  loading = false;\r\n\r\n  projectList: ProjectModel[];\r\n\r\n  public isInvestor: boolean;\r\n  private ServiceApplicationId: number;\r\n  public editMode: boolean;\r\n  private InvestorId: any;\r\n  private approval = false;\r\n  public projectCancellationReasonList: any[];\r\n  private currentLang: any;\r\n  lookup: Lookup;\r\n  private ServiceId: any;\r\n  private ProjectId: any;\r\n\r\n  constructor(public fb: FormBuilder,\r\n              public projetServices: ProjectProfileService,\r\n              public dataSharing: DataSharingService,\r\n              public accountService: AccountService,\r\n              public serviceApplication: ServiceApplicationService,\r\n              public snackbar: MatSnackBar,\r\n              public route: ActivatedRoute,\r\n              public errMsg: ErrorMessage,\r\n              public toastr: ToastrService,\r\n              public configService: ConfigurationService,\r\n              public projectCancellationServices: ProjectCancellationService) {\r\n    this.lookup = new Lookup();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.currentLang = this.configService.language;\r\n    this.initStaticDataOwnerShip(this.currentLang);\r\n    this.ServiceId = this.route.snapshot.params['ServiceId'] || this.route.snapshot.params['serviceId'];\r\n    this.InvestorId = this.route.snapshot.params['InvestorId'] || this.route.snapshot.params['investorId'];\r\n    this.ProjectId = this.route.snapshot.params['ProjectId'] || this.route.snapshot.params['projectId'];\r\n    this.ServiceApplicationId = this.route.snapshot.params['ServiceApplicationId'] || this.route.snapshot.params['serviceApplicationId'];\r\n\r\n    this.initForm();\r\n    this.editMode = false;\r\n    this.getAllProjects();\r\n    this.isInvestor = !this.accountService.getUserType();\r\n    if (this.ServiceApplicationId > 1) {\r\n      this.approval = true;\r\n      this.getServiceApplicationCancellation();\r\n    }\r\n  }\r\n\r\n  initStaticDataOwnerShip(currentLang) {\r\n    this.projectCancellationReasonList = [];\r\n\r\n    let cancellationReason: CancellationReasonModel = new CancellationReasonModel();\r\n    CancellationReason.forEach(pair => {\r\n      cancellationReason = {\r\n        'Id': pair.Id.toString(),\r\n        'Desc': (currentLang === 'am' ? pair.Description : pair.DescriptionEng)\r\n      };\r\n\r\n\r\n      this.projectCancellationReasonList.push(cancellationReason);\r\n    });\r\n    // // console.log(this.formOfOwnershipList);\r\n  }\r\n\r\n  initForm() {\r\n    this.projectCancellationForm = this.fb.group({\r\n      ProjectId: new FormControl(this.ProjectId),\r\n      ServiceId: this.ServiceId,\r\n      CancellationReason: new FormControl(),\r\n      CancellationDate: new FormControl(),\r\n      CancellationRemark: new FormControl(),\r\n      InvestorId: new FormControl(this.InvestorId),\r\n      ServiceApplicationId: new FormControl(this.ServiceApplicationId)\r\n\r\n\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.projectCancellationServices.create(this.projectCancellationForm.value)\r\n      .subscribe(result => {\r\n        // console.log(result);\r\n        this.dataSharing.renewalIndex.next(2);\r\n        this.notification('Project cancellation saved');\r\n      });\r\n  }\r\n\r\n  getAllProjects() {\r\n    this.projetServices.getProjectOnlyByInvestorId(this.InvestorId)\r\n      .subscribe(result => {\r\n        this.projectList = result;\r\n        // console.log(this.projectList);\r\n      });\r\n  }\r\n\r\n  notification(message: string) {\r\n    this.toastr.success(` Succesfully ${message} .!`, 'Success');\r\n\r\n    this.loading = false;\r\n    this.snackbar.open(` Succesfully ${message} .!`, 'Close', {\r\n      duration: 3000,\r\n    });\r\n  }\r\n\r\n\r\n  private getServiceApplicationCancellation() {\r\n    this.projectCancellationServices.getCancellationByServiceApplicationId(this.ServiceApplicationId)\r\n      .subscribe(result => {\r\n        // console.log(result.ProjectCancellation);\r\n        this.editMode = true;\r\n\r\n        this.projectCancellationForm.patchValue(result.ProjectCancellation[0]);\r\n\r\n      }, error => this.errMsg.getError(error));\r\n  }\r\n\r\n  approve() {\r\n    if (this.approval) {\r\n\r\n      // this.approveApplication(this.ServiceApplicationId);\r\n      this.projectCancellationServices.update(this.projectCancellationForm.value, this.ProjectId)\r\n        .subscribe(result => {\r\n          this.toastr.success('cancellation successfully approved', 'Success');\r\n          this.approveApplication(this.ServiceApplicationId);\r\n        });\r\n    }\r\n  }\r\n\r\n  approveApplication(id: any) {\r\n    this.lookup.Code = 44449;\r\n    this.serviceApplication.changeApplicationStatus(this.lookup, id)\r\n      .subscribe(result => {\r\n        this.toastr.success('Application Completed successfully ', 'Success');\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class FormOfOwnershipModel {\r\n  public Id: number;\r\n  public Desc: string;\r\n}\r\n\r\n@Injectable()\r\nexport class CancellationReasonModel {\r\n  public Id: number;\r\n  public Desc: string;\r\n}\r\n"],"sourceRoot":""}